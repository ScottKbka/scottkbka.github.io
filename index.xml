<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cassidy K</title>
    <link>https://cassidy.codes/</link>
    <description>Recent content on Cassidy K</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 Dec 2019 10:22:00 -0500</lastBuildDate>
    
        <atom:link href="https://cassidy.codes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Don&#39;t Trust the Cops: Sometimes Rubocop is Wrong</title>
      <link>https://cassidy.codes/blog/2019-12-14-rubo-cop-is-wrong/</link>
      <pubDate>Sat, 14 Dec 2019 10:22:00 -0500</pubDate>
      
      <guid>https://cassidy.codes/blog/2019-12-14-rubo-cop-is-wrong/</guid>
      <description>

&lt;p&gt;My team at work recently upgraded our version of &lt;a href=&#34;https://github.com/rubocop-hq/rubocop&#34;&gt;Rubocop&lt;/a&gt;, the popular linter
used to enforce good Ruby code style. With the upgrade we got a whole bunch of new suggestions and warnings about style
violations.&lt;/p&gt;

&lt;p&gt;One of them that tripped us up was the
&lt;a href=&#34;https://github.com/rubocop-hq/rubocop-performance/blob/master/lib/rubocop/cop/performance/count.rb&#34;&gt;Performance/Count&lt;/a&gt;
rule.&lt;/p&gt;

&lt;p&gt;According to the Rubocop docs:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This cop is used to identify usages of &lt;code&gt;count&lt;/code&gt; on an &lt;code&gt;Enumerable&lt;/code&gt; that follow calls to &lt;code&gt;select&lt;/code&gt; or &lt;code&gt;reject&lt;/code&gt;. Querying
logic can instead be passed to the &lt;code&gt;count&lt;/code&gt; call.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So in plain Ruby, the cop sees that you are filtering an array with &lt;code&gt;select&lt;/code&gt; or &lt;code&gt;reject&lt;/code&gt; and &lt;em&gt;then&lt;/em&gt; calling &lt;code&gt;count&lt;/code&gt; on
it. This is inefficient because &lt;code&gt;count&lt;/code&gt; can actually do all this work for you.&lt;/p&gt;

&lt;p&gt;But! What if you&amp;rsquo;re in a Rails project and you have some code that looks like this?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#111&#34;&gt;@users&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;admin?&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;count&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Rubocop will autocorrect this to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#111&#34;&gt;@users&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;count&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;admin?&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looks okay? Well, this will likely execute a SQL count that ignores the block!!! Rubocop incorrectly assumes that
&lt;code&gt;@users&lt;/code&gt; is an &lt;code&gt;Array&lt;/code&gt;. Why else would you be calling &lt;code&gt;select&lt;/code&gt; on it, right?&lt;/p&gt;

&lt;p&gt;In our case, though, &lt;code&gt;@users&lt;/code&gt; was actually an ActiveRecord object that hadn&amp;rsquo;t been loaded yet! Since ActiveRecord
lazy-loads things, sending count to this object executes an SQL &lt;code&gt;COUNT&lt;/code&gt; that ignores the block passed in!&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what it looks like in action:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;count&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;admin?&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# (0.4ms)  SELECT COUNT(*) FROM &amp;#34;users&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 320&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;count&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# (0.6ms)  SELECT COUNT(*) FROM &amp;#34;users&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 320&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See how we got the same number each time here? This is because ActiveRecord ignores the block passed into count without
raising an error and counts &lt;em&gt;all&lt;/em&gt; users!.&lt;/p&gt;

&lt;p&gt;The correct thing to do here is to pass your filter parameters into a &lt;code&gt;where&lt;/code&gt; &lt;em&gt;and then&lt;/em&gt; do a &lt;code&gt;count&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;count&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# (0.3ms)  SELECT COUNT(*) FROM &amp;#34;users&amp;#34; WHERE &amp;#34;users&amp;#34;.&amp;#34;type&amp;#34; = $1  [[&amp;#34;type&amp;#34;, &amp;#34;Admin&amp;#34;]]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ActiveRecord count works like this: &lt;a href=&#34;https://devdocs.io/rails~4.2/activerecord/calculations#method-i-count&#34;&gt;https://devdocs.io/rails~4.2/activerecord/calculations#method-i-count&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ruby count works like this: &lt;a href=&#34;https://devdocs.io/ruby~2.3/enumerable#method-i-count&#34;&gt;https://devdocs.io/ruby~2.3/enumerable#method-i-count&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;These are two different count methods that can be called on objects that look similar.&lt;/li&gt;
&lt;li&gt;Passing a block to an ActiveRecord count will not raise an error, but will return inaccurate results.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Shared Examples and Contexts in RSpec</title>
      <link>https://cassidy.codes/blog/2019-09-28-rspec-shared-examples-contexts/</link>
      <pubDate>Sat, 28 Sep 2019 12:54:41 -0400</pubDate>
      
      <guid>https://cassidy.codes/blog/2019-09-28-rspec-shared-examples-contexts/</guid>
      <description>

&lt;p&gt;When I first learned testing in Rails, I learned &lt;a href=&#34;http://rspec.info/&#34;&gt;RSpec&lt;/a&gt;, but then in my last job, I wrote most of my tests in &lt;a href=&#34;https://github.com/seattlerb/minitest&#34;&gt;minitest&lt;/a&gt;. I enjoyed the challenge of learning a new test framework and found the tests super fast!&lt;/p&gt;

&lt;p&gt;But recently, I&amp;rsquo;ve been working on a project in RSpec again and I have a renewed appreciation for it! In this post, I&amp;rsquo;m going to talk about how to define and use shared examples and shared contexts in RSpec.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to start with shared examples here because shared contexts are very similar in how you set them up.&lt;/p&gt;

&lt;h2 id=&#34;shared-examples&#34;&gt;Shared Examples&lt;/h2&gt;

&lt;p&gt;Shared examples are a set of examples that you want to use in multiple files. You&amp;rsquo;ll want to use shared examples when you&amp;rsquo;re writing a Module or a &lt;a href=&#34;https://api.rubyonrails.org/classes/ActiveSupport/Concern.html&#34;&gt;Concern&lt;/a&gt; in Rails.&lt;/p&gt;

&lt;p&gt;In this example below, we have two models, &lt;code&gt;Door&lt;/code&gt; and &lt;code&gt;Phone&lt;/code&gt;, and they both can be locked. When we lock one of these things, we set an attribute on the model called &lt;code&gt;locked_at&lt;/code&gt;, which is a timestamp of when the item was locked.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# app/models/door.rb&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;Door&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span style=&#34;color:#00a8c8&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;Lockable&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# app/models/phone.rb&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;Phone&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span style=&#34;color:#00a8c8&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;Lockable&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# app/models/concerns/lockable.rb&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;Lockable&lt;/span&gt;
  &lt;span style=&#34;color:#00a8c8&#34;&gt;extend&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;ActiveSupport&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;Concern&lt;/span&gt;

  &lt;span style=&#34;color:#111&#34;&gt;included&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;scope&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;:locked&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;not&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;locked_at&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;scope&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;:locked_between&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;start_time&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;end_time&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;locked_at&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;start_time&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;end_time&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#00a8c8&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;lock!&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;update&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;locked_at&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;Time&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;zone&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;now&lt;/span&gt;
  &lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see here that both models share some functionality through the &lt;code&gt;Lockable&lt;/code&gt; module. This module lets us lock items and find all items that are locked.&lt;/p&gt;

&lt;p&gt;Our tests can then be set up like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# spec/models/door_spec.rb&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;RSpec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;describe&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;Door&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;:model&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;it_behaves_like&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;Lockable&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# spec/models/phone_spec.rb&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;RSpec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;describe&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;Phone&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;:model&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;it_behaves_like&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;Lockable&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# spec/support/shared_examples/lockable_spec.rb&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;RSpec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;shared_examples&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;Lockable&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;subject&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;described_class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#111&#34;&gt;describe&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;#lock&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;it&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;sets locked_at to current time&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;do&lt;/span&gt;
      &lt;span style=&#34;color:#111&#34;&gt;freeze_time&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;do&lt;/span&gt;
        &lt;span style=&#34;color:#111&#34;&gt;expect&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;subject&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;lock!&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;change&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;subject&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;locked_at&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;Time&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;now&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;utc&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
      &lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now when we run our model tests, we get two passing tests. One for each model!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bundle exec rspec spec/models/
..

Finished in 0.02916 seconds (files took 1.28 seconds to load)
2 examples, 0 failures
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;parameters&#34;&gt;Parameters&lt;/h3&gt;

&lt;p&gt;What happens if you need to pass some parameters that might be different in one context but not the other? Shared examples accept parameters! In the example below, I am creating an instance of the subject class and passing it into the shared example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# spec/models/door_spec.rb&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;RSpec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;describe&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;Door&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;:model&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;it_behaves_like&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;Lockable&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;Time&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;now&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;utc&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# spec/models/phone_spec.rb&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;RSpec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;describe&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;Phone&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;:model&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;it_behaves_like&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;Lockable&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;Time&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;now&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;utc&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# spec/support/shared_examples/lockable_spec.rb&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;RSpec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;shared_examples&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;Lockable&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;subject&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;described_class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;create&lt;/span&gt;  &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#111&#34;&gt;describe&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;#lock&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;it&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;sets locked_at to current time&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;do&lt;/span&gt;
      &lt;span style=&#34;color:#111&#34;&gt;freeze_time&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;do&lt;/span&gt;
        &lt;span style=&#34;color:#111&#34;&gt;expect&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;subject&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;lock!&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;change&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;subject&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;locked_at&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
      &lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;gotchas&#34;&gt;Gotchas!&lt;/h3&gt;

&lt;p&gt;RSpec doesn&amp;rsquo;t auto-load any files for you! You&amp;rsquo;ll see that I&amp;rsquo;ve put my shared examples in &lt;code&gt;spec/support/shared_examples/&lt;/code&gt;. You need to tell RSpec to &lt;code&gt;require&lt;/code&gt; this file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# spec/rails_helper.rb&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;Dir&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;./spec/support/**/*.rb&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;sort&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;each&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;f&lt;/span&gt;  &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;shared-contexts&#34;&gt;Shared Contexts&lt;/h2&gt;

&lt;p&gt;What about times when you have to do a whole bunch of contextual setup in your tests? It gets super annoying when you have to do this setup twice. Shared contexts define code that will be evaluated before the tests run.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s add a method called &lt;code&gt;locked?&lt;/code&gt; to our module so that we can see if a door or phone is locked.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# app/models/concerns/lockable.rb&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;Lockable&lt;/span&gt;
  &lt;span style=&#34;color:#00a8c8&#34;&gt;extend&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;ActiveSupport&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;Concern&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# Other code excluded for brevity.&lt;/span&gt;

  &lt;span style=&#34;color:#00a8c8&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;locked?&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;locked_at&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;present?&lt;/span&gt;
  &lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we want to add a shared context that creates a new &lt;code&gt;subject&lt;/code&gt; for us. I&amp;rsquo;m also going to define a &lt;code&gt;locked_at&lt;/code&gt; &lt;code&gt;let&lt;/code&gt; block here.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# spec/support/shared_contexts/locked_at.rb&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;RSpec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;shared_context&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;locked_at&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;:locked_at&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;subject&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;described_class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;locked_at&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;locked_at&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally, lets add some tests to our shared examples for lockable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# spec/support/shared_examples/lockable_spec.rb&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;RSpec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;shared_examples&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;Lockable&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;subject&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;described_class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# Other code excluded for brevity.&lt;/span&gt;

  &lt;span style=&#34;color:#111&#34;&gt;describe&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;#locked?&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;context&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;it is not locked&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;do&lt;/span&gt;
      &lt;span style=&#34;color:#111&#34;&gt;include_context&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;locked_at&amp;#39;&lt;/span&gt;

      &lt;span style=&#34;color:#111&#34;&gt;it&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;returns true&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;do&lt;/span&gt;
        &lt;span style=&#34;color:#111&#34;&gt;expect&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;subject&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;locked?&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;be&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;false&lt;/span&gt;
      &lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#111&#34;&gt;context&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;it is locked&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;do&lt;/span&gt;
      &lt;span style=&#34;color:#111&#34;&gt;include_context&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;locked_at&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;do&lt;/span&gt;
        &lt;span style=&#34;color:#111&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;:locked_at&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;Time&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;now&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;utc&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;

      &lt;span style=&#34;color:#111&#34;&gt;it&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;returns false&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;do&lt;/span&gt;
        &lt;span style=&#34;color:#111&#34;&gt;expect&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;subject&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;locked?&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;be&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;true&lt;/span&gt;
      &lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, the shared context is setting up a new subject for us. When we want to change one of the parameters of the context, we can use a block. In the test to ensure a subject is locked, you can see I have overridden the &lt;code&gt;locked_at&lt;/code&gt; variable.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I would choose carefully when implementing these though! Like &lt;a href=&#34;https://www.sandimetz.com/blog/2016/1/20/the-wrong-abstraction&#34;&gt;Sandi Metz says&lt;/a&gt;, &amp;ldquo;duplication is far cheaper than the wrong abstraction.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;If you find your shared contexts always have a block that overrides some defaults, or your shared examples require lots of parameters to set up, you might have the wrong abstraction.&lt;/p&gt;

&lt;p&gt;Shared contexts and examples are great for cleaning up your code when you need them though!&lt;/p&gt;

&lt;p&gt;You can find the code from this post over on GitHub: &lt;a href=&#34;https://github.com/cassidycodes/rspec-examples&#34;&gt;https://github.com/cassidycodes/rspec-examples&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning Go</title>
      <link>https://cassidy.codes/blog/2019-09-22-go-workshop/</link>
      <pubDate>Sun, 22 Sep 2019 21:37:54 -0400</pubDate>
      
      <guid>https://cassidy.codes/blog/2019-09-22-go-workshop/</guid>
      <description>

&lt;p&gt;This weekend I went to a workshop to learn Go that was organized by &lt;a href=&#34;https://twitter.com/deniseyu21&#34;&gt;Denise Yu&lt;/a&gt;. I wasn&amp;rsquo;t able to stay for the whole thing, but I got so learn some fundamentals of Go. It was really nice to focus a day learning something new.&lt;/p&gt;

&lt;h2 id=&#34;gopath&#34;&gt;GOPATH&lt;/h2&gt;

&lt;p&gt;The first thing that caught me off guard was how Go looks for Go code. In the workshop, they glazed over this topic by suggesting that everyone start writing code in &lt;code&gt;~/go&lt;/code&gt;. It makes sense to me that they did that so that people could focus on writing code rather than configuring their setup. But of course, I did things differently and this broke all sorts of stuff!&lt;/p&gt;

&lt;p&gt;According to the &lt;a href=&#34;https://golang.org/cmd/go/#hdr-GOPATH_environment_variable&#34;&gt;Go Language Docs&lt;/a&gt;, the &lt;code&gt;GOPATH&lt;/code&gt; environment variable lists all the places on your computer to look for Go code. So when you write &lt;code&gt;import &amp;quot;mylibrary&amp;quot;&lt;/code&gt;, Go will look inside all the directories listed in the &lt;code&gt;GOPATH&lt;/code&gt; to find &lt;code&gt;mylibrary&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When I had a directory structure like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myproject
  main.go
  src
    mylibrary
      mylibrary
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go couldn&amp;rsquo;t find my library! This is because my &lt;code&gt;GOPATH&lt;/code&gt; was empty and Go looked in the default location, which was &lt;code&gt;~/go&lt;/code&gt;. My code lived somewhere else!&lt;/p&gt;

&lt;p&gt;One of the TAs at the event said that he sets the &lt;code&gt;GOPATH&lt;/code&gt; every time he &lt;code&gt;cd&lt;/code&gt;s into a new project. I decided to make an alias for this so that I could set the &lt;code&gt;GOPATH&lt;/code&gt; quickly when I moved into a new directory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Set GOPATH to current directory and give helpful feedback.&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;setgopath&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;export GOPATH=`pwd` &amp;amp;&amp;amp; echo \&amp;#34;GOPATH is set to &lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;$GOPATH&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;\&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Really tiny alias because I&amp;#39;m lazy.&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;sgp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;setgopath&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So now when I tried to run my &lt;code&gt;main.go&lt;/code&gt; code, the GOPATH was set to &lt;code&gt;myproject&lt;/code&gt; and Go was able to find &lt;code&gt;mylibrary&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: If you&amp;rsquo;re on a different system, &lt;a href=&#34;https://github.com/golang/go/wiki/SettingGOPATH&#34;&gt;Go has docs on how to set your GOPATH&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;src-is-inferred&#34;&gt;&lt;code&gt;src&lt;/code&gt; is Inferred!&lt;/h2&gt;

&lt;p&gt;Go looks for three directories in the &lt;code&gt;GOPATH&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;src&lt;/code&gt; holds source code for your libraries.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bin&lt;/code&gt; holds compiled binaries for your libraries.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pkg&lt;/code&gt; holds compiled package objects.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here&amp;rsquo;s something I don&amp;rsquo;t know. What&amp;rsquo;s the difference between a compiled binary and a compiled package object? Hrm&amp;hellip;maybe that&amp;rsquo;s a blog post for another day.&lt;/p&gt;

&lt;h2 id=&#34;basic-structure-of-a-file&#34;&gt;Basic structure of a file.&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// This line tells you what the package name is. Packages with the name `main` are are usually compiled into a standalone binary. Packages that are meant to be used by other Go programs will have another name, like myStringTools, for example.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// The import statement tells us what packages to import. I&amp;#39;m going to import fmt here because it gives us tools for formatting out put to the console.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// The entry point! We named our package main, and the entry point matches. When we build this program as a binary, this is the function that will get called.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#75af00&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;PrintLn&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;Don&amp;#39;t go! Stay!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;language-basics&#34;&gt;Language Basics&lt;/h2&gt;

&lt;h3 id=&#34;values&#34;&gt;Values&lt;/h3&gt;

&lt;p&gt;Go has all the common value types like strings, integers, floats, and booleans. One thing I found interesting is that strings cannot be declared with single quotes. They either need to use backticks (for string literals) or double quotes.&lt;/p&gt;

&lt;p&gt;Single quotes are used to denote &amp;ldquo;&lt;a href=&#34;https://devdocs.io/go/builtin/index#rune&#34;&gt;runes&lt;/a&gt;&amp;rdquo;, which I don&amp;rsquo;t totally understand, but they seem to stand in for 32-bit integers in some way.&lt;/p&gt;

&lt;h3 id=&#34;variables&#34;&gt;Variables&lt;/h3&gt;

&lt;p&gt;Go is a strongly typed language. Meaning once you&amp;rsquo;ve told Go that a certain variable is an integer, for example, Go will expect that variable to always be an integer.&lt;/p&gt;

&lt;p&gt;There are two ways to declare a variable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// Declare the variable and its type in the global scope.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;myInt&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;int&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// Assign a value to it!
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;myInt&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// Variables assigned with a capital letter at the beginning will be imported into other files when you use `import`.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;MyExport&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;int&lt;/span&gt;

&lt;span style=&#34;color:#00a8c8&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;// := lets you declare and assign a value in one line!
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75af00&#34;&gt;myOtherInt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One trick with &lt;code&gt;:=&lt;/code&gt; is that you cannot use it in the global scope. You can only declare and assign variables in this way inside of a function.&lt;/p&gt;

&lt;p&gt;Values in Go have what&amp;rsquo;s called a &lt;em&gt;zero-value&lt;/em&gt;. This means that if you&amp;rsquo;ve declared a variable but you have not assigned a value, it has a default value. For integers, this is zero, for strings it&amp;rsquo;s an empty string.&lt;/p&gt;

&lt;h3 id=&#34;for&#34;&gt;For&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;for&lt;/code&gt; loops look very familiar to me:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#00a8c8&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#00a8c8&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75af00&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first section is the local variable inside of the loop. The second section is the condition, in this case, keep looping until &lt;code&gt;i&lt;/code&gt; is less than or equal to 10. And the third section is what to do when at the end of the loop. Here we&amp;rsquo;re saying to increment &lt;code&gt;i&lt;/code&gt; by one.&lt;/p&gt;

&lt;h3 id=&#34;arrays-slices&#34;&gt;Arrays &amp;amp; Slices&lt;/h3&gt;

&lt;p&gt;I thought the implementation of arrays and slices to be interesting. Arrays are numbered lists. In a language like Ruby, you can keep tacking data on to the end of an array without worrying about how big it&amp;rsquo;s getting.&lt;/p&gt;

&lt;p&gt;In Go, you can&amp;rsquo;t do that. If I declare an array like this: &lt;code&gt;var a [5]int&lt;/code&gt;. Go create an array of five integers with their zero-values: &lt;code&gt;[0,0,0,0,0]&lt;/code&gt;. I cannot add any more items to this array! Why&amp;rsquo;s that? Programs need to ask the underlying operating system for space in memory. If I ask for enough room for five integers, that&amp;rsquo;s all I get! Need more? We&amp;rsquo;ll I&amp;rsquo;d have to ask for more then copy my original array over to the new array.&lt;/p&gt;

&lt;p&gt;Sounds like lots of work, right? We&amp;rsquo;ll check out a slice!&lt;/p&gt;

&lt;p&gt;A slice is like an array, but some of the heavy lifting is built into it. Need to add more data to the end of a slice? Go ahead!&lt;/p&gt;

&lt;p&gt;To create a slice, you use the builtin function &lt;code&gt;make&lt;/code&gt;, which is used to initialize &lt;a href=&#34;https://devdocs.io/go/builtin/index#make&#34;&gt;slices, maps, and chans&lt;/a&gt;. What&amp;rsquo;s a chan? Good question. But I&amp;rsquo;ll leave that for another blog post because I have no idea.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;
  &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;strings&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#00a8c8&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;// Initialize a slice with members.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75af00&#34;&gt;mySlice&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;([]&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;

  &lt;span style=&#34;color:#75af00&#34;&gt;mySlice&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;My&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#75af00&#34;&gt;mySlice&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;slice&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#75af00&#34;&gt;mySlice&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;of&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#75af00&#34;&gt;mySlice&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;pizza&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;// Append two strings to the slice!
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#111&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;mySlice&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;is&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;good!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;

  &lt;span style=&#34;color:#75af00&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;PrintLn&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;strings&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Join&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;mySlice&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;))&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;// =&amp;gt; My slice of pizza is good!
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;range&#34;&gt;Range&lt;/h3&gt;

&lt;p&gt;Final one for today. Ranges! I&amp;rsquo;m not totally sure I have the language right here, but a range seems to be an iterator or enumerator. If you have slice, for example, you can use it to iterate over the data in a &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#00a8c8&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#75af00&#34;&gt;sentence&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;My slice of pizza is good.&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#75af00&#34;&gt;words&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;strings&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Split&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;sentence&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;

  &lt;span style=&#34;color:#00a8c8&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;word&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;words&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75af00&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;word&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;// =&amp;gt; My
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// =&amp;gt; slice
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// =&amp;gt; of
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// =&amp;gt; pizza
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// =&amp;gt; is
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// =&amp;gt; good.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I had fun learning Go! The language feels very familiar to me. The things I&amp;rsquo;ve found tricky so far were understanding what a range was, and figuring out my &lt;code&gt;GOPATH&lt;/code&gt;. I&amp;rsquo;m happy I could figure those things out and write a few programs that worked. I&amp;rsquo;m sure if I worked in Go more frequently, I&amp;rsquo;d find something new go get stumped on though!&lt;/p&gt;

&lt;p&gt;You can checkout all my code from the workshop at the links below. I&amp;rsquo;ll also link to the guide we were using.&lt;/p&gt;

&lt;p&gt;My code: &lt;a href=&#34;https://github.com/cassidycodes/hellogo&#34;&gt;https://github.com/cassidycodes/hellogo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Practical Go: &lt;a href=&#34;https://idiomat.gitbook.io/gobridge/&#34;&gt;https://idiomat.gitbook.io/gobridge/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Favourite Debugging Trick</title>
      <link>https://cassidy.codes/blog/2019-08-06-favourite-debugging-trick/</link>
      <pubDate>Tue, 06 Aug 2019 23:37:38 -0400</pubDate>
      
      <guid>https://cassidy.codes/blog/2019-08-06-favourite-debugging-trick/</guid>
      <description>

&lt;p&gt;Last week I wrote about some of my favourite debugging tools in Ruby. I forgot one trick that I find super useful!&lt;/p&gt;

&lt;p&gt;Today I was writing a script that would iterate through objects in an S3 bucket and group these objects by similar names. The naming structure looked like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;original.jpg
tumb_original.jpg
profile_original.jpg&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So all three of those images should get grouped together because they all come from &lt;code&gt;orignal.jpg&lt;/code&gt;. But I got my name comparison muddled and something wasn&amp;rsquo;t working right. It would work perfectly for 200 images then it blew up on the 201st!&lt;/p&gt;

&lt;p&gt;Printing logs or putting a binding in a loop like this is gnarly. I don&amp;rsquo;t want to loop through 200 successful iterations to find what I need!&lt;/p&gt;

&lt;h2 id=&#34;conditional-bindings&#34;&gt;Conditional Bindings!&lt;/h2&gt;

&lt;p&gt;To solve this problem, I just made my binding conditional.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#111&#34;&gt;s3_objects&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;each&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;img&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;binding&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;pry&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;img&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;/badfilename.jpg/&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This time we&amp;rsquo;ll only hit the binding if the image key contains the filename that&amp;rsquo;s giving me grief!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating a tmux Colour Theme</title>
      <link>https://cassidy.codes/blog/2019-08-03-tmux-colour-theme/</link>
      <pubDate>Sat, 03 Aug 2019 15:22:43 -0400</pubDate>
      
      <guid>https://cassidy.codes/blog/2019-08-03-tmux-colour-theme/</guid>
      <description>

&lt;p&gt;I recently decided to use the &lt;a href=&#34;https://draculatheme.com/&#34;&gt;Dracula&lt;/a&gt; in my coding environment. Love it or hate it, I&amp;rsquo;ve been working with Vim and &lt;a href=&#34;https://github.com/tmux/tmux&#34;&gt;tmux&lt;/a&gt; for the past two years and I inherited my Vim and tmux configurations from someone else. I dove head first into this environment and got used to it pretty quickly, but I never spent much time configuring it.&lt;/p&gt;

&lt;p&gt;When I switched Vim over to Dracula, I immediately realized that I needed to change my tmux colours too!&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how I approached writing a theme in my tmux config. But first, this is what it looks like! 😍&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://cassidy.codes/images/posts/tmux-theme/tmux-dracula.png&#34;&gt;&lt;img src=&#34;https://cassidy.codes/images/posts/tmux-theme/tmux-dracula.png&#34; alt=&#34;a screenshot of a terminal with a tmux window&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;general-setup&#34;&gt;General Setup&lt;/h2&gt;

&lt;p&gt;First, I wanted all the hex codes for Dracula colours right in front of me so I didn&amp;rsquo;t have to keep switching to a browser window. Then, lets tell tmux to use a terminal that supports colours.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll notice that I&amp;rsquo;m using the hex codes for these colours. tmux supports passing hex codes in to the configs, but it will convert the hex code to the closest 256color.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-tmux&#34; data-lang=&#34;tmux&#34;&gt;# Dracula Colours
# background_color &amp;#39;#282a36&amp;#39;
# current_line_color &amp;#39;#44475a&amp;#39;
# foreground_color &amp;#39;#f8f8f2&amp;#39;
# comment_color &amp;#39;#6272a4&amp;#39;
# cyan &amp;#39;#8be9fd&amp;#39;
# green &amp;#39;#50fa7b&amp;#39;
# orange &amp;#39;#ffb86c&amp;#39;
# pink &amp;#39;#ff79c6&amp;#39;
# purple &amp;#39;#bd93f9&amp;#39;
# red &amp;#39;#ff5555&amp;#39;
# yellow &amp;#39;#f1fa8c&amp;#39;

set -g default-terminal &amp;#34;screen-256color&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;borders&#34;&gt;Borders&lt;/h2&gt;

&lt;p&gt;a tmux session can have windows and windows have panes. Each pane is a separate terminal session and each window can have one or more terminal sessions. If you&amp;rsquo;re familiar with iTerm, think of panes like a horizontal or vertical split.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-tmux&#34; data-lang=&#34;tmux&#34;&gt;# pane border
set -g pane-border-style fg=&amp;#39;#6272a4&amp;#39;
set -g pane-active-border-style fg=&amp;#39;#ff79c6&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we&amp;rsquo;ve set two styles. The default border colour is Dracula&amp;rsquo;s dark purple comment colour. tumx style directives are a comma-separated list of styles for foreground, &lt;code&gt;fg&lt;/code&gt;, and background &lt;code&gt;bg&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fg&lt;/code&gt; and &lt;code&gt;bg&lt;/code&gt; each accept a colour and a list of attributes. The tmux docs gives a list of all the attributes you can use:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The attributes is either none or a comma-delimited list of one or more of: &lt;code&gt;bright&lt;/code&gt; (or &lt;code&gt;bold&lt;/code&gt;), &lt;code&gt;dim&lt;/code&gt;, &lt;code&gt;underscore&lt;/code&gt;, &lt;code&gt;blink&lt;/code&gt;, &lt;code&gt;reverse&lt;/code&gt;, &lt;code&gt;hidden&lt;/code&gt;, &lt;code&gt;italics&lt;/code&gt;, or &lt;code&gt;strikethrough&lt;/code&gt; to turn an attribute on, or an attribute prefixed with &lt;code&gt;no&lt;/code&gt; to turn one off.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These two styles tell tmux to make all the boarders dark purple, but if my cursor is in a window, make that pane&amp;rsquo;s borders pink.&lt;/p&gt;

&lt;h2 id=&#34;message-style&#34;&gt;Message Style&lt;/h2&gt;

&lt;p&gt;At the bottom of a tmux window, you&amp;rsquo;ll see the status bar. But this gets covered up by the tmux command line and any messages from tmux.&lt;/p&gt;

&lt;p&gt;I kept this similar to the status bar, with a grey background and blue text.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-tmux&#34; data-lang=&#34;tmux&#34;&gt;# message text
set -g message-style bg=&amp;#39;#44475a&amp;#39;,fg=&amp;#39;#8be9fd&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;status-line&#34;&gt;Status Line&lt;/h2&gt;

&lt;p&gt;The status line is comprised of three parts. &lt;code&gt;status-left&lt;/code&gt;, &lt;code&gt;window-status&lt;/code&gt; and &lt;code&gt;status-right&lt;/code&gt;. Remember how I said that tmux has multiple windows. You can think of these like tabs in iTerm. All of the &lt;code&gt;window-status&lt;/code&gt; directives style these tabs.&lt;/p&gt;

&lt;p&gt;Lets start with some basic configs.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-tmux&#34; data-lang=&#34;tmux&#34;&gt;set -g status-style bg=&amp;#39;#44475a&amp;#39;,fg=&amp;#39;#bd93f9&amp;#39;
set -g status-interval 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we set the background to a dark grey and the foreground to purple. Although, the purple will get overwritten later.&lt;/p&gt;

&lt;p&gt;The next line is important for what we&amp;rsquo;re going to do with &lt;code&gt;status-right&lt;/code&gt; later. It tells tmux to refresh the status line every second.&lt;/p&gt;

&lt;p&gt;All right, now for &lt;code&gt;status-left&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-tmux&#34; data-lang=&#34;tmux&#34;&gt;# status left
# are we controlling tmux or the content of the panes?
set -g status-left &amp;#39;#[bg=#f8f8f2]#[fg=#282a36]#{?client_prefix,#[bg=#ff79c6],} ☺ &amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The syntax here is getting a little more tricky than when we were styling the status line. The status and window options take a single string as their argument, but you can pass styles in through square brackets and you can call tmux variables inside curly braces.&lt;/p&gt;

&lt;p&gt;So my status left line says, make the background light grey and the foreground dark grey. Then we have a conditional. Has the client prefix key been pressed? If so, lets actually make the background pink, if not, don&amp;rsquo;t do anything. And finally The string ends with &lt;code&gt;☺&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This gives me a quick way to see if I&amp;rsquo;ve typed the prefix or not. Handy when you&amp;rsquo;re prone to mistyping, or when you get distracted in the middle of switching panes or windows.&lt;/p&gt;

&lt;p&gt;Next, I want to add to this status-left string. Passing the &lt;code&gt;a&lt;/code&gt; option into &lt;code&gt;set&lt;/code&gt; tells tmux to append this string to the previous one rather than overwrite it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-tmux&#34; data-lang=&#34;tmux&#34;&gt;# are we zoomed into a pane?
set -ga status-left &amp;#39;#[bg=#44475a]#[fg=#ff79c6] #{?window_zoomed_flag, ↕  ,   }&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looks similar to the one above, right. This time, I&amp;rsquo;m displaying an arrow if I&amp;rsquo;ve zoomed one of my panes to take up the whole window. Otherwise, I&amp;rsquo;m leaving this blank.&lt;/p&gt;

&lt;p&gt;Okay! On to to &lt;code&gt;window-status&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-tmux&#34; data-lang=&#34;tmux&#34;&gt;# window status
set-window-option -g window-status-style fg=&amp;#39;#bd93f9&amp;#39;,bg=default
set-window-option -g window-status-current-style fg=&amp;#39;#ff79c6&amp;#39;,bg=&amp;#39;#282a36&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here I&amp;rsquo;ve set the default window status to blend in to the rest of the status bar and the active window to be purple with white text. &lt;code&gt;window-status-format&lt;/code&gt; is where things get more interesting.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-tmux&#34; data-lang=&#34;tmux&#34;&gt;set -g window-status-current-format &amp;#34;#[fg=#44475a]#[bg=#bd93f9]#[fg=#f8f8f2]#[bg=#bd93f9] #I #W #[fg=#bd93f9]#[bg=#44475a]&amp;#34;
set -g window-status-format &amp;#34;#[fg=#f8f8f2]#[bg=#44475a]#I #W #[fg=#44475a] &amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This looks similar to what we have above, but there&amp;rsquo;s some style tricks we need to do. I wanted to have triangular shapes delineating my windows similar to what Vim Powerline does. In order to get the style to work I have to toggle the foreground and background colours before and after the &lt;code&gt;&lt;/code&gt;. Then to display the name of the window I&amp;rsquo;m using &lt;code&gt;#I&lt;/code&gt;, which is a short-hand for the &lt;code&gt;window_index&lt;/code&gt; variable and &lt;code&gt;#W&lt;/code&gt;, which is short for &lt;code&gt;window_name&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Almost done! &lt;code&gt;status-right&lt;/code&gt; should look pretty familiar now.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-tmux&#34; data-lang=&#34;tmux&#34;&gt;# status right
set -g status-right &amp;#39;#[fg=#8be9fd,bg=#44475a]#[fg=#44475a,bg=#8be9fd] #(tmux-mem-cpu-load -g 5 --interval 2) &amp;#39;
set -ga status-right &amp;#39;#[fg=#ff79c6,bg=#8be9fd]#[fg=#44475a,bg=#ff79c6] #(uptime | cut -f 4-5 -d &amp;#34; &amp;#34; | cut -f 1 -d &amp;#34;,&amp;#34;) &amp;#39;
set -ga status-right &amp;#39;#[fg=#bd93f9,bg=#ff79c6]#[fg=#f8f8f2,bg=#bd93f9] %a %H:%M:%S #[fg=#6272a4]%Y-%m-%d &amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The difference here is that I&amp;rsquo;m using parentheses to tell tmux to execute a bash command. The first one displays a summary of my memory and CPU usage and the second one tells me how long it&amp;rsquo;s been since the last reboot.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Yay, a Dracula theme!!! I&amp;rsquo;m still working on perfecting my tmux config. Lots of it is borrowed from other people&amp;rsquo;s dot files, but I&amp;rsquo;m pretty happy with my Dracula theme. Now I have to do the same form my command prompt!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Debugging in Rails with Pry, `bundle open` and `puts`</title>
      <link>https://cassidy.codes/blog/2019-08-01-debugging-in-rails/</link>
      <pubDate>Thu, 01 Aug 2019 22:23:11 -0400</pubDate>
      
      <guid>https://cassidy.codes/blog/2019-08-01-debugging-in-rails/</guid>
      <description>

&lt;p&gt;This week I got to dig into some debugging that I really enjoyed. Well, if you had asked me in the middle of it I might not have been having fun, but I found a solution! I used a handful of tools to approach debugging and they all gave me a little bit more information to solve the problem that I didn&amp;rsquo;t have before.&lt;/p&gt;

&lt;p&gt;Here is a bit about each tool and what I find useful about it. Let me know if you have other Ruby or Rails debugging tips!&lt;/p&gt;

&lt;h2 id=&#34;pry&#34;&gt;Pry!&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://pryrepl.org/&#34;&gt;Pry&lt;/a&gt; is an amazing tool for Ruby. It gives you all kinds of tools like &lt;code&gt;? my_method&lt;/code&gt; to show you documentation or &lt;code&gt;ls MyObject&lt;/code&gt; to show you all the methods you can call on an object. You can even use &lt;code&gt;cd&lt;/code&gt; to move into an object!&lt;/p&gt;

&lt;p&gt;Here is a tiny class with a pry binding in it to show you how a few of the methods work.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;User&lt;/span&gt;
  &lt;span style=&#34;color:#00a8c8&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;initialize&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;@name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;name&lt;/span&gt;
  &lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;
  
  &lt;span style=&#34;color:#00a8c8&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;name&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;binding&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;pry&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;@name&lt;/span&gt;
  &lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I started up from the command line and initialized a new user. When I call the &lt;code&gt;name&lt;/code&gt; method, Pry prints out the lines around the binding and gives you an interactive prompt.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;[1] pry(main)&amp;gt; me = User.new(&amp;#39;cassidy&amp;#39;)
=&amp;gt; #&amp;lt;User:0x00007fd807ed87a8 @name=&amp;#34;cassidy&amp;#34;&amp;gt;
[2] pry(main)&amp;gt; me.name

From: (pry) @ line 9 User#name:

     7: def name
     8:   binding.pry
 =&amp;gt;  9:   @name
    10: end
[1] pry(#&amp;lt;User&amp;gt;)&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point I could type &lt;code&gt;@name&lt;/code&gt; to see what the value of my instance variable is.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;[1] pry(#&amp;lt;User&amp;gt;)&amp;gt; @name
=&amp;gt; &amp;#34;cassidy&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ah good, it&amp;rsquo;s what I expected. Let&amp;rsquo;s use &lt;code&gt;step&lt;/code&gt; to move the execution forward one more frame.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;[2] pry(#&amp;lt;User&amp;gt;)&amp;gt; step
From: /Users/cassidy/.rbenv/versions/2.3.8/lib/ruby/gems/2.3.0/gems/pry-0.12.2/lib/pry/pry_instance.rb @ line 388 Pry#evaluate_ruby:

    383: def evaluate_ruby(code)
    384:   inject_sticky_locals!
    385:   exec_hook :before_eval, code, self
    386:
    387:   result = current_binding.eval(code, Pry.eval_path, Pry.current_line)
 =&amp;gt; 388:   set_last_result(result, code)
    389: ensure
    390:   update_input_history(code)
    391:   exec_hook :after_eval, result, self
    392: end

[1] pry(#&amp;lt;Pry&amp;gt;)&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Neat! It looks like the next frame is Pry itself! Ever wonder how pry works? Check out all the methods that are here!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;[1] pry(#&amp;lt;Pry&amp;gt;)&amp;gt; ls
Pry#methods:
  add_sticky_local  commands=            eval                 extra_sticky_locals=   last_dir                   memory_size   print                   quiet?             should_print?
  backtrace         complete             eval_string          hooks                  last_dir=                  memory_size=  print=                  raise_up           show_result
  backtrace=        config               eval_string=         hooks=                 last_exception             output        process_command         raise_up!          sticky_locals
  binding_stack     current_binding      evaluate_ruby        inject_local           last_exception=            output=       process_command_safely  raise_up_common    suppress_output
  binding_stack=    current_context      exception_handler    inject_sticky_locals!  last_file                  output_array  prompt                  repl               suppress_output=
  color             custom_completions   exception_handler=   input                  last_file=                 output_ring   prompt=                 reset_eval_string  update_input_history
  color=            custom_completions=  exec_hook            input=                 last_result                pager         push_binding            run_command
  command_state     editor               exit_value           input_array            last_result=               pager=        push_initial_binding    select_prompt
  commands          editor=              extra_sticky_locals  input_ring             last_result_is_exception?  pop_prompt    push_prompt             set_last_result
instance variables:
  @backtrace      @command_state  @custom_completions  @indent      @last_exception  @last_result_is_exception  @prompt_stack  @suppress_output
  @binding_stack  @config         @eval_string         @input_ring  @last_result     @output_ring               @stopped
locals: _  __  _dir_  _ex_  _file_  _in_  _out_  _pry_  code  result&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;m not going to dig around in there too much, but lets see what &lt;code&gt;next&lt;/code&gt; does.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;From: /Users/cassidy/.rbenv/versions/2.3.8/lib/ruby/gems/2.3.0/gems/pry-0.12.2/lib/pry/pry_instance.rb @ line 390 Pry#evaluate_ruby:

    383: def evaluate_ruby(code)
    384:   inject_sticky_locals!
    385:   exec_hook :before_eval, code, self
    386:
    387:   result = current_binding.eval(code, Pry.eval_path, Pry.current_line)
    388:   set_last_result(result, code)
    389: ensure
 =&amp;gt; 390:   update_input_history(code)
    391:   exec_hook :after_eval, result, self
    392: end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It moved us one line forward in the current frame. So behind the scenes, it executed all of line 38 and returned us to this same stack frame because there was more code to execute here. Neat!&lt;/p&gt;

&lt;p&gt;Okay, enough fiddling around with pry. Let&amp;rsquo;s type &lt;code&gt;continue&lt;/code&gt; and we&amp;rsquo;ll finally see the result of the &lt;code&gt;name&lt;/code&gt; method.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text.&#34; data-lang=&#34;text.&#34;&gt;[1] pry(#&amp;lt;Pry&amp;gt;)&amp;gt; continue
=&amp;gt; &amp;#34;cassidy&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;bundle-open&#34;&gt;Bundle Open&lt;/h2&gt;

&lt;p&gt;What happens when you start stepping through a call stack in pry and you find yourself wandering around stack frames that belong to a Ruby Gem you&amp;rsquo;re using. When this happens to me I like to go checkout what the code actually looks like in that gem with &lt;code&gt;bundle open&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the error I was working on today. You&amp;rsquo;ll see that the error is raised in a third party library. I might have made a mistake that caused it, but my mistake is so far down the call stack that I don&amp;rsquo;t see it!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;2019-08-01T21:42:43.628Z 34126 TID-ower3a8uc WARN: NoMethodError: undefined method `body&amp;#39; for nil:NilClass
2019-08-01T21:42:43.628Z 34126 TID-ower3a8uc WARN: /Users/cassidy/.rbenv/versions/2.3.8/lib/ruby/gems/2.3.0/gems/carrierwave-0.10.0/lib/carrierwave/storage/fog.rb:228:in `read&amp;#39;
/Users/cassidy/.rbenv/versions/2.3.8/lib/ruby/gems/2.3.0/gems/carrierwave-0.10.0/lib/carrierwave/uploader/cache.rb:77:in `sanitized_file&amp;#39;
/Users/cassidy/.rbenv/versions/2.3.8/lib/ruby/gems/2.3.0/gems/carrierwave-0.10.0/lib/carrierwave/uploader/cache.rb:116:in `cache!&amp;#39;
/Users/cassidy/.rbenv/versions/2.3.8/lib/ruby/gems/2.3.0/gems/carrierwave-0.10.0/lib/carrierwave/uploader/versions.rb:226:in `recreate_versions!&amp;#39;
/Users/cassidy/.rbenv/versions/2.3.8/lib/ruby/gems/2.3.0/gems/carrierwave_backgrounder-0.4.2/lib/backgrounder/workers/process_asset.rb:12:in `perform&amp;#39;`&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I had no idea what was &lt;code&gt;nil&lt;/code&gt; here that shouldn&amp;rsquo;t be so I ran &lt;code&gt;bundle open carrierwave&lt;/code&gt; to open the gem&amp;rsquo;s codebase in a text editor. Once I was there, I found the line where the error was raised and put a &lt;code&gt;binding.pry&lt;/code&gt; in it so I could get some better insight as to what was going on.&lt;/p&gt;

&lt;h2 id=&#34;puts&#34;&gt;&lt;code&gt;puts&lt;/code&gt;!!!&lt;/h2&gt;

&lt;p&gt;Sometimes pry isn&amp;rsquo;t going to work for you. This is especially true if you&amp;rsquo;re using a multi-threaded web server or Sidekiq to process background jobs. When this happens, you&amp;rsquo;ll get an interactive prompt for a few seconds then you&amp;rsquo;ll get booted out because another process is trying to write logs to the same master process. Argh! This can be frustrating.&lt;/p&gt;

&lt;p&gt;My favourite thing to do here is to print my own logs. I try to make these stand out so I don&amp;rsquo;t miss them when the logs are going by. Here&amp;rsquo;s some pseudocode that resembles the problem I was solving today.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;filename&lt;/span&gt;
   &lt;span style=&#34;color:#111&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;---------------------&amp;#39;&lt;/span&gt;
   &lt;span style=&#34;color:#111&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;in filename&amp;#39;&lt;/span&gt;
   &lt;span style=&#34;color:#111&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;attributes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;image&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
   &lt;span style=&#34;color:#111&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;persisted?&lt;/span&gt;
   &lt;span style=&#34;color:#111&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;image_changed?&lt;/span&gt;
   &lt;span style=&#34;color:#111&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;---------------------&amp;#39;&lt;/span&gt;
   &lt;span style=&#34;color:#00a8c8&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;attributes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;image&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;persisted?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;image_changed?&lt;/span&gt;

   &lt;span style=&#34;color:#111&#34;&gt;new_filename&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;SecureRandom&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;hex&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;extension&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;&lt;/span&gt;
   &lt;span style=&#34;color:#111&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;new_filename&lt;/span&gt;
   &lt;span style=&#34;color:#111&#34;&gt;new_filename&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This gave me some clear output so I could see what was happening each time this method was called. The great thing about &lt;code&gt;puts&lt;/code&gt; debugging is that you&amp;rsquo;re never wondering if you lost count of which iteration you&amp;rsquo;re on when a method gets called multiple times.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;When I was working on my problem today, I used all three of these tools together. Pry is my go-to, but when that isn&amp;rsquo;t enough, I&amp;rsquo;ll reach for something else. I ended up learning lots about the CarrierWave life cycle that will make the rest of my task so much easier! I even learned about some methods CarrierWave has that aren&amp;rsquo;t documented.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Concatenating MySQL Results with Group_concat and Concat_ws</title>
      <link>https://cassidy.codes/blog/2018/05/26/concatenating-mysql-results-with-group-by/</link>
      <pubDate>Sat, 26 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cassidy.codes/blog/2018/05/26/concatenating-mysql-results-with-group-by/</guid>
      <description>

&lt;p&gt;Recently, I needed to build a query that would transform data in our database into a format that we posted to ElasticSearch. I&amp;rsquo;ll use the example of blog posts here since they&amp;rsquo;re easy for everyone to grasp. Imagine that each post can have many tags and you want one field on ElasticSearch with the tag ids and another field that has the tag names and description.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what the database might look like:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;posts&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;id | title
---|------------------------------
1  | Blogging about dogs is fun!
2  | Look at these cute dogs
3  | Wow how about these cute dogs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;post_tags&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;post_id | tag_id
--------|-------
1       | 1
1       | 2
2       | 1
2       | 3
3       | 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;tags&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;id | name | description
---|------|-----------------
1  | dogs | Posts about dogs
2  | cute | Cute things
3  | omg  | OMG CUTE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is the result we&amp;rsquo;re looking for:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;id | title                       | tag_ids | tag_names_descriptions
---|-----------------------------|---------|------------------------------------------
1  | Blogging about dogs is fun! | 1, 2    | dogs, cute, Posts about dogs, Cute things
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;starting-query&#34;&gt;Starting Query&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s start by retrieving a join table of our posts and tags. We&amp;rsquo;ll limit this to one post to keep our tables small for this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
       &lt;span style=&#34;color:#111&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
       &lt;span style=&#34;color:#111&#34;&gt;tag&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt;          &lt;span style=&#34;color:#00a8c8&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;tag_id&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
       &lt;span style=&#34;color:#111&#34;&gt;tag&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;name&lt;/span&gt;        &lt;span style=&#34;color:#00a8c8&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;tag_name&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
       &lt;span style=&#34;color:#111&#34;&gt;tag&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;description&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;tag_description&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;FROM&lt;/span&gt;   &lt;span style=&#34;color:#111&#34;&gt;posts&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;post&lt;/span&gt;
       &lt;span style=&#34;color:#00a8c8&#34;&gt;INNER&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;JOIN&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;posts_tags&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;pt&lt;/span&gt;
               &lt;span style=&#34;color:#00a8c8&#34;&gt;ON&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;pt&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;post_id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt;
       &lt;span style=&#34;color:#00a8c8&#34;&gt;INNER&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;JOIN&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;tags&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;tag&lt;/span&gt;
               &lt;span style=&#34;color:#00a8c8&#34;&gt;ON&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;tag&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;pt&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;tag_id&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;LIMIT&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;id | title                       | tag_id | tag_name | tag_description
---|-----------------------------|--------|----------|-----------------
1  | Blogging about dogs is fun! | 1      | dogs     | Posts about dogs
2  | Blogging about dogs is fun! | 2      | cute     | Cute things
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, great, we have a table with our post and its tags, but we have duplicate rows! We can use &lt;code&gt;GROUP BY&lt;/code&gt; to group these row by the post id, but then we&amp;rsquo;ll lose the tag data in the second row and get a result that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;id | title                       | tag_id | tag_name | tag_description
---|-----------------------------|--------|----------|-----------------
1  | Blogging about dogs is fun! | 1      | dogs     | Posts about dogs
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;group-concat&#34;&gt;Group_concat&lt;/h2&gt;

&lt;p&gt;We can use the &lt;code&gt;Group_concat&lt;/code&gt; function to concatenate data from multiple rows when we use &lt;code&gt;GROUP BY&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
       &lt;span style=&#34;color:#111&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
       &lt;span style=&#34;color:#111&#34;&gt;Group_concat&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;tag&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;tag_ids&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
       &lt;span style=&#34;color:#111&#34;&gt;tag&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;name&lt;/span&gt;             &lt;span style=&#34;color:#00a8c8&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;tag_name&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
       &lt;span style=&#34;color:#111&#34;&gt;tag&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;description&lt;/span&gt;      &lt;span style=&#34;color:#00a8c8&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;tag_description&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;FROM&lt;/span&gt;   &lt;span style=&#34;color:#111&#34;&gt;posts&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;post&lt;/span&gt;
       &lt;span style=&#34;color:#00a8c8&#34;&gt;INNER&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;JOIN&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;posts_tags&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;pt&lt;/span&gt;
               &lt;span style=&#34;color:#00a8c8&#34;&gt;ON&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;pt&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;post_id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt;
       &lt;span style=&#34;color:#00a8c8&#34;&gt;INNER&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;JOIN&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;tags&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;tag&lt;/span&gt;
               &lt;span style=&#34;color:#00a8c8&#34;&gt;ON&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;tag&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;pt&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;tag_id&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;GROUP&lt;/span&gt;  &lt;span style=&#34;color:#00a8c8&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;LIMIT&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;id | title                       | tag_ids | tag_name | tag_description
---|-----------------------------|---------|----------|-----------------
1  | Blogging about dogs is fun! | 1, 2    | dogs     | Posts about dogs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take a look at &lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_group-concat&#34;&gt;the MySQL Docs for Group_concat&lt;/a&gt; you can do some cool things with it like ensure the values are unique, sort the values, and choose a custom separator.&lt;/p&gt;

&lt;p&gt;But what about our tag_name and tag_description? Here, we need to concatenate two separate columns into one!&lt;/p&gt;

&lt;h2 id=&#34;concat-ws&#34;&gt;Concat_ws&lt;/h2&gt;

&lt;p&gt;We know that &lt;code&gt;Group_concat&lt;/code&gt; gives us a string, so if we look under String Functions in the MySQL docs, we&amp;rsquo;ll find &lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_concat-ws&#34;&gt;&lt;code&gt;Concat_ws&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;Concat_ws&lt;/code&gt; lets us concatenate two or more strings with a separator between them. The separator is a comma by default, but for legibility, we want a space too, so let&amp;rsquo;s use the &lt;code&gt;SEPARATOR&lt;/code&gt; option. Here are our steps:&lt;/p&gt;

&lt;p&gt;Concatenate the tag name:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#111&#34;&gt;Group_concat&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;tag&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;SEPARATOR&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Concatenate the tag description:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#111&#34;&gt;Group_concat&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;tag&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;description&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;SEPARATOR&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And concatenate both of those!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#111&#34;&gt;Concat_ws&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;
  &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;Group_concat&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;tag&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;SEPARATOR&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;),&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;Group_concat&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;tag&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;description&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;SEPARATOR&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;putting-it-all-together&#34;&gt;Putting it all together&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
       &lt;span style=&#34;color:#111&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
       &lt;span style=&#34;color:#111&#34;&gt;Group_concat&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;tag&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;tag_ids&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
       &lt;span style=&#34;color:#111&#34;&gt;Concat_ws&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;
         &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;
         &lt;span style=&#34;color:#111&#34;&gt;Group_concat&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;tag&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;SEPARATOR&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;),&lt;/span&gt;
         &lt;span style=&#34;color:#111&#34;&gt;Group_concat&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;tag&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;description&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;SEPARATOR&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
       &lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;                    &lt;span style=&#34;color:#00a8c8&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;tag_names_descriptions&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;FROM&lt;/span&gt;   &lt;span style=&#34;color:#111&#34;&gt;posts&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;post&lt;/span&gt;
       &lt;span style=&#34;color:#00a8c8&#34;&gt;INNER&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;JOIN&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;posts_tags&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;pt&lt;/span&gt;
               &lt;span style=&#34;color:#00a8c8&#34;&gt;ON&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;pt&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;post_id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt;
       &lt;span style=&#34;color:#00a8c8&#34;&gt;INNER&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;JOIN&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;tags&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;tag&lt;/span&gt;
               &lt;span style=&#34;color:#00a8c8&#34;&gt;ON&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;tag&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;pt&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;tag_id&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;GROUP&lt;/span&gt;  &lt;span style=&#34;color:#00a8c8&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;LIMIT&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;id | title                       | tag_ids | tag_name   | tag_descriptions
---|-----------------------------|---------|------------|------------------------------
1  | Blogging about dogs is fun! | 1, 2    | dogs, cute | Posts about dogs, Cute things
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;nice-work&#34;&gt;Nice work!&lt;/h2&gt;

&lt;p&gt;In this post, we&amp;rsquo;ve learned how to use &lt;code&gt;Group_concat&lt;/code&gt; to concatenate data in a column when using &lt;code&gt;GROUP BY&lt;/code&gt;. &lt;code&gt;Group_concat&lt;/code&gt; lets us keep data that would otherwise disappear when we group things.&lt;/p&gt;

&lt;p&gt;We also learned how to combine data from multiple columns by using &lt;code&gt;Concat_ws&lt;/code&gt; together with &lt;code&gt;Group_concat&lt;/code&gt;. With this function, we can join multiple columns and rows together into one value.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing Super Fast Queries in Rails</title>
      <link>https://cassidy.codes/blog/2018/04/12/return-raw-data-from-active-record/</link>
      <pubDate>Thu, 12 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cassidy.codes/blog/2018/04/12/return-raw-data-from-active-record/</guid>
      <description>

&lt;p&gt;At work this week I had to speed up a background job that was clogging up our queue. This job aggregates data on records and posts to our Elastic Search index. It was suffering from all kinds of extra database calls. I had lots of fun working on this query! It’s so satisfying to make things fast.&lt;/p&gt;

&lt;p&gt;Here’s a bit of what I learned about building SQL queries that  can get tough with a typical ActiveRecord object.&lt;/p&gt;

&lt;h2 id=&#34;a-bit-about-the-data&#34;&gt;A bit about the data&lt;/h2&gt;

&lt;p&gt;Let’s imaging we have a blog that has many users. Each user has many posts, and posts have many comments. Your database might look like this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;users&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;id | name
---|------------------
1  | Sonja Sis
2  | Nicol Hollinghead
3  | Edison Huseman
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;posts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;id|title|body|user_id
1 | I love dogs | Dogs are great. | 1
2 | I love cats | Cats are better than dogs. | 2
3 | I love both dogs and cats | Pets are fun. | 3&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;comments&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;id | body          | user_id | post_id
---|---------------|---------|--------
1  | Me too!       | 3       | 2
2  | They are not! | 1       | 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now lets say we want to know how many comments each post has received in the last 90 days, 30 days, and 15 days. We&amp;rsquo;re looking for a data structure like this in the end:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;ninety_days&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;190&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
         &lt;span style=&#34;color:#d88200&#34;&gt;thirty_days&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
         &lt;span style=&#34;color:#d88200&#34;&gt;fifteen_days&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;},&lt;/span&gt;
  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;ninety_days&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;583&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
         &lt;span style=&#34;color:#d88200&#34;&gt;thirty_days&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;392&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
         &lt;span style=&#34;color:#d88200&#34;&gt;fifteen_days&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We could try something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;Post&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;ActiveRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;Base&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;scope&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;:between&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;range&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;created_at&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#00a8c8&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;MyPostSummary&lt;/span&gt;
  &lt;span style=&#34;color:#00a8c8&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;summarize&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;Post&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;find_each&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;with_object&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;({})&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
      &lt;span style=&#34;color:#111&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;:post_id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{}&lt;/span&gt;
      &lt;span style=&#34;color:#111&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;:ninety_days&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        &lt;span style=&#34;color:#111&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;comments&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;between&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;days&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ago&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;days&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ago&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;count&lt;/span&gt;
      &lt;span style=&#34;color:#111&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;:thirty_days&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        &lt;span style=&#34;color:#111&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;comments&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;between&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;days&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ago&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;days&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ago&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;count&lt;/span&gt;
      &lt;span style=&#34;color:#111&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;:post_id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;:fifteen_days&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        &lt;span style=&#34;color:#111&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;comments&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;between&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;days&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ago&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;days&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ago&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;count&lt;/span&gt;
  &lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#00a8c8&#34;&gt;MyPostSummary&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;summarize&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# { 1 =&amp;gt; { ninety_days: 190,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         thirty_days:  67,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         fifteen_days: 14 },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  2 =&amp;gt; { ninety_days:  583,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         thirty_days:  392,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         fifteen_days: 83 } }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pretty repetitive, right? If we’re building a summary of all of our the posts in our blog, we&amp;rsquo;re going to be doing a lot of unnecessary counting!&lt;/p&gt;

&lt;h2 id=&#34;using-select&#34;&gt;Using &lt;code&gt;select&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;When I first tackled this problem, I thought, “Hmmm, maybe I can use ActiveRecord&amp;rsquo;s &lt;code&gt;select&lt;/code&gt; to select a count for each period.” This does wonders for saving database queries! I’ll leave out the rest of the class here for brevity. Here’s what that query looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Use SQL to count the comments for each post.&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;SQL&lt;/span&gt;
           &lt;span style=&#34;color:#111&#34;&gt;posts&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
           &lt;span style=&#34;color:#00a8c8&#34;&gt;Count&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;IF&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;comments&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;created_at&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color:#00a8c8&#34;&gt;DATE_SUB&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;DAY&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;),&lt;/span&gt;
                    &lt;span style=&#34;color:#111&#34;&gt;comments&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
                    &lt;span style=&#34;color:#00a8c8&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;ninety_days&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
           &lt;span style=&#34;color:#00a8c8&#34;&gt;Count&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;IF&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;DATE_SUB&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;DAY&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;),&lt;/span&gt;
                    &lt;span style=&#34;color:#111&#34;&gt;comments&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
                    &lt;span style=&#34;color:#00a8c8&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;thirty_days&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
           &lt;span style=&#34;color:#00a8c8&#34;&gt;Count&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;IF&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;DATE_SUB&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;DAY&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;),&lt;/span&gt;
                    &lt;span style=&#34;color:#111&#34;&gt;comments&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
                    &lt;span style=&#34;color:#00a8c8&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;fifteen_days&lt;/span&gt;
         &lt;span style=&#34;color:#00a8c8&#34;&gt;SQL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We need a &lt;code&gt;LEFT OUTER JOIN&lt;/code&gt; here because we want to be sure we get posts back even if they have 0 comments.&lt;/p&gt;

&lt;p&gt;Also note the &lt;code&gt;group&lt;/code&gt; here. Without this, we&amp;rsquo;d get 1 post record back for each comment and we&amp;rsquo;d end up with duplicates because posts have many comments!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#111&#34;&gt;posts&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;Post&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;left_outer_joins&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;:comments&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;group&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;posts.id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#111&#34;&gt;posts&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;find_each&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;with_object&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;({})&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;:post_id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{}&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;:ninety_days&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ninety_days&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;:thirty_days&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;thirty_days&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;:fifteen_days&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;fifteen_days&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ok, great! We’ve solved the problem of counting the going back to the database to count the comments. Now we just do one query that returns a count for us.&lt;/p&gt;

&lt;p&gt;Did you know that when you add &lt;code&gt;SELECT … AS my_select&lt;/code&gt;, ActiveRecord will add a method for that attribute to the object returned? That’s why &lt;code&gt;post.ninety_days&lt;/code&gt; works in the code above.  I thought that was pretty handy.&lt;/p&gt;

&lt;p&gt;I’m still not comfortable with this end result though. We’re loading records into ActiveRecord when all we need from them is the count data and the post id.&lt;/p&gt;

&lt;h2 id=&#34;exec-query-to-the-rescue&#34;&gt;&lt;code&gt;exec_query&lt;/code&gt; to the rescue!&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;exec_query&lt;/code&gt; returns a hash of the column names and values you asked for. This lets you skip active record entirely!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#111&#34;&gt;query&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;Post&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;left_outer_joins&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;:comments&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;group&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;posts.id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;to_sql&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;Post&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;connection&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;exec_query&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;query&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; [{ &amp;#34;id&amp;#34;           =&amp;gt; 1,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#       &amp;#34;ninety_days&amp;#34;  =&amp;gt; 190,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#       &amp;#34;thirty_days&amp;#34;  =&amp;gt; 67,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#       &amp;#34;fifteen_days&amp;#34; =&amp;gt; 14 }...]&lt;/span&gt;

&lt;span style=&#34;color:#111&#34;&gt;result&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;map!&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;symbolize_keys!&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;group_by&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;:id&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# { 1 =&amp;gt; { ninety_days: 190,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         thirty_days:  67,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         fifteen_days: 14 },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  2 =&amp;gt; { ninety_days:  583,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         thirty_days:  392,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         fifteen_days: 83 }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yay! We got the same result and look at how little code it is! If you’re querying a big dataset, this will save to all kinds of time!&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;If you need to retrieve data from the database, but don&amp;rsquo;t need any of the functionality of your models, use &lt;code&gt;exec_query&lt;/code&gt; to skip ActiveRecord and speed things up a bit.&lt;/p&gt;

&lt;p&gt;If you &lt;em&gt;do&lt;/em&gt; need ActiveRecord, then you can add additional attributes to the object you get back by passing SQL into the &lt;code&gt;select&lt;/code&gt; method and naming giving it a name with &lt;code&gt;AS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For queries that have complex joins, or ones that you might need to build programmatically, relying on ActiveRecord might get difficult. Take a look at &lt;a href=&#34;https://github.com/rails/arel&#34;&gt;Arel&lt;/a&gt;, a library that forms the abstract syntax tree manager behind ActiveRecord, for situations like this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Rewrite git History when Collaborating with Others</title>
      <link>https://cassidy.codes/blog/2018-03-22-rewrite-git-history/</link>
      <pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cassidy.codes/blog/2018-03-22-rewrite-git-history/</guid>
      <description>&lt;p&gt;I was recently working on a new node project, and while I was first testing things out, I committed the contents of the dist directory to git. Later on, I was getting the project set up with Docker, and I realized I didn’t want the dist in the repo as it would increase the size of the Docker image.&lt;/p&gt;

&lt;p&gt;Removing files from git is a bit tricky. You can add it to the .gitignore, but once git is tracking an object, git will always follow its changes even if it&amp;rsquo;s in the gitignore. I&amp;rsquo;ve kept &lt;a href=&#34;https://dalibornasevic.com/posts/2-permanently-remove-files-and-folders-from-a-git-repository&#34;&gt;Dalibor Nasevic&amp;rsquo;s post&lt;/a&gt; in my bookmarks for situations like this. But to remove the dist from our project, we needed to rewrite history on multiple branches to be sure that the files here would never show up again&lt;/p&gt;

&lt;p&gt;Here are the steps we followed to rewrite history on multiple branches:&lt;/p&gt;

&lt;p&gt;Checkout master.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git checkout master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add &lt;code&gt;dist/&lt;/code&gt; to the &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Rewrite history on master to ignore the &lt;code&gt;dist&lt;/code&gt; directory. Note that this rewrites the SHA of each commit. Your branch will now look like an entirely different set of commits to git.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git filter-branch --tree-filter &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;rm -rf dist&amp;#39;&lt;/span&gt; HEAD&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See if any objects in your repo are pointing to the dist. You should see your branch name in the output here.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git &lt;span style=&#34;color:#00a8c8&#34;&gt;for&lt;/span&gt;-each-ref --format&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;delete %(refname)&amp;#39;&lt;/span&gt; refs/original&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dereference the objects by expiring the reflog and forcing GC.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git &lt;span style=&#34;color:#00a8c8&#34;&gt;for&lt;/span&gt;-each-ref --format&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;delete %(refname)&amp;#39;&lt;/span&gt; refs/original &lt;span style=&#34;color:#111&#34;&gt;|&lt;/span&gt; git update-ref --stdin
git reflog expire --expire&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;now --all
git gc --prune&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;now&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Force push the new master branch.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git push origin master --force&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now other developers will need to follow similar steps to get their branches up to date. They can checkout their working branch and follow steps above, but stop short of pushing their branches. These steps will remove the &lt;code&gt;dist&lt;/code&gt; directory from history for them, but they will rewrite every SHA in the branch&amp;rsquo;s history, so the new master branch and their branch will look different to git. To fix this, we&amp;rsquo;ll cherry pick their commits onto a new branch.&lt;/p&gt;

&lt;p&gt;Use this command to find the range of SHAs you want to cherrypick. If you have more than 50 commits in your branch, you can drop the &lt;code&gt;-n 50&lt;/code&gt; option. Copy the first and last SHAs of your work.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git log —pretty&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;oneline —graph —abbrev-commit -n &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Start with the new history&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git checkout master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And branch off of that&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git checkout -b your-branch-new-history&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally cherry-pick your commits onto your new branch&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git cherry-pick &amp;lt;starting sha&amp;gt;..&amp;lt;ending sha&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can now remove your original working branch and push your new work up to GitHub. Once you&amp;rsquo;ve fixed all your working branches, you can verify that the &lt;code&gt;dist&lt;/code&gt; directory is no longer in your history by listing all files ever tracked by git, including deleted ones:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git log --pretty&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;format: --name-only --diff-filter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;A &lt;span style=&#34;color:#111&#34;&gt;|&lt;/span&gt; sort - &lt;span style=&#34;color:#111&#34;&gt;|&lt;/span&gt; sed &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;/^$/d&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;|&lt;/span&gt; grep dist&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Toronto Sound Prints</title>
      <link>https://cassidy.codes/blog/2017/05/12-toronto-sound-prints/</link>
      <pubDate>Fri, 12 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cassidy.codes/blog/2017/05/12-toronto-sound-prints/</guid>
      <description>

&lt;p&gt;A couple years back I collaborated with &lt;a href=&#34;http://sherazkhan.de/&#34;&gt;Sheraz Khan&lt;/a&gt; on a couple of art projects. For a while, we had a portfolio site exhibiting our artworks but that domain recently expired.&lt;/p&gt;

&lt;p&gt;One of the projects we worked on together was called Toronto Sound Prints. I really liked the end product for this project, so here&amp;rsquo;s a sample of what we worked on.&lt;/p&gt;

&lt;p&gt;We worked with Ryerson University’s SMART Lab to create visual interpretations of data they collected that correlated sound data with stress in human subjects.&lt;/p&gt;

&lt;p&gt;We took photographs from five locations and applied glitches to the photographs based on the data the SMART Lab had collected. The more stressful a sound was likely to be, the more intense the glitch became.&lt;/p&gt;

&lt;h2 id=&#34;toronto-sound-map&#34;&gt;Toronto Sound Map&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://cassidy.codes/images/posts/toronto-sound-prints/toronto-sound-map.jpg&#34; alt=&#34;King &amp;amp; Bathurst&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The map is a snapshot of the different peaks and valleys of sound stress that exist in a city at any point in time. The microphone icons on the map correspond to the images below.&lt;/p&gt;

&lt;h2 id=&#34;1-bloor-markham&#34;&gt;1. Bloor &amp;amp; Markham&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://cassidy.codes/images/posts/toronto-sound-prints/1-slider-bloor-markham.jpg&#34; alt=&#34;Bloor &amp;amp; Markham&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;audio preload=&#34;metadata&#34; controls=&#34;constrols&#34; class=&#34;audio&#34;&gt;
    &lt;source src=&#34;https://cassidy.codes/audio/1-bloor_markham.mp3&#34; type=&#34;audio/mpeg&#34;&gt;
    Your browser does not support the &lt;code&gt;audio&lt;/code&gt; element.
&lt;/audio&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-castle-frank-bloor&#34;&gt;2. Castle Frank &amp;amp; Bloor&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://cassidy.codes/images/posts/toronto-sound-prints/3-slider-castle-frank-bloor.jpg&#34; alt=&#34;Castle Frank &amp;amp; Bloor&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;audio preload=&#34;metadata&#34; controls=&#34;constrols&#34; class=&#34;audio&#34;&gt;
    &lt;source src=&#34;https://cassidy.codes/audio/3-castle_frank_bloor.mp3&#34; type=&#34;audio/mpeg&#34;&gt;
    Your browser does not support the &lt;code&gt;audio&lt;/code&gt; element.
&lt;/audio&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-lakeshore-don&#34;&gt;3. Lakeshore &amp;amp; Don&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://cassidy.codes/images/posts/toronto-sound-prints/2-slider-lakeshore-don.jpg&#34; alt=&#34;Lakeshore &amp;amp; Don&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;audio preload=&#34;metadata&#34; controls=&#34;constrols&#34; class=&#34;audio&#34;&gt;
    &lt;source src=&#34;https://cassidy.codes/audio/2-lakeshore_don.mp3&#34; type=&#34;audio/mpeg&#34;&gt;
    Your browser does not support the &lt;code&gt;audio&lt;/code&gt; element.
&lt;/audio&gt;&lt;/p&gt;

&lt;h2 id=&#34;4-king-bathurst&#34;&gt;4. King &amp;amp; Bathurst&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://cassidy.codes/images/posts/toronto-sound-prints/5-slider-king-bathurst.jpg&#34; alt=&#34;King &amp;amp; Bathurst&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;audio preload=&#34;metadata&#34; controls=&#34;constrols&#34; class=&#34;audio&#34;&gt;
    &lt;source src=&#34;https://cassidy.codes/audio/5-king_bathurst.mp3&#34; type=&#34;audio/mpeg&#34;&gt;
    Your browser does not support the &lt;code&gt;audio&lt;/code&gt; element.
&lt;/audio&gt;&lt;/p&gt;

&lt;h2 id=&#34;5-dundas-bay&#34;&gt;5. Dundas &amp;amp; Bay&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://cassidy.codes/images/posts/toronto-sound-prints/4-slider-dundas-bay.jpg&#34; alt=&#34;Dundas &amp;amp; Bay&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;audio preload=&#34;metadata&#34; controls=&#34;constrols&#34; class=&#34;audio&#34;&gt;
    &lt;source src=&#34;https://cassidy.codes/audio/4-dundas_bay.mp3&#34; type=&#34;audio/mpeg&#34;&gt;
    Your browser does not support the &lt;code&gt;audio&lt;/code&gt; element.
&lt;/audio&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Video Glitch Art in Ruby</title>
      <link>https://cassidy.codes/blog/2015/10/06/video-glitch-art-in-ruby/</link>
      <pubDate>Tue, 06 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cassidy.codes/blog/2015/10/06/video-glitch-art-in-ruby/</guid>
      <description>&lt;p&gt;This is the text from a talk about my video glitch work on Fido&amp;rsquo;s &lt;a href=&#34;http://mobilemusicvideo.ca&#34;&gt;Mobile Music Video&lt;/a&gt;. Credit for making this kind of work so fun goes to &lt;a href=&#34;https://github.com/ucnv/aviglitch&#34;&gt;UCNV&lt;/a&gt; for creating the AviGlitch Gem.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A few months ago I got to work on a music video with Vice Magazine and Fido. When I tell people about this contract, both developers and artists alike ask “How did you get that job?”&lt;/p&gt;

&lt;p&gt;I am going to answer the question in two ways. First from an experience stand point—What did I have in my portfolio and what connections did I have to land a cool contract like this?—and then second, from a technical standpoint—what did I do with code? How do you break videos with Ruby? What is Glitch Art?&lt;/p&gt;

&lt;p&gt;I came into being a developer from a curiosity about making things with code. I never really thought I’d have a job as a developer, I just wanted to see what I could do.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;img-fluid mx-auto d-block&#34; src=&#34;https://cassidy.codes/images/posts/video-glitch-art/civic-images-2.jpg&#34; alt=&#34;Civic Images&#34;&gt;&lt;/p&gt;

&lt;p&gt;My very fist application was written in Processing, a Java-based language, and used the now-defunct ProcessingJS to embed it into a WordPress site. Everything I did there is now obsolete since HTML5 is old news now. It’s a little funny to look at now but that was a huge feat for me as my area of study had nothing to do with programming. I taught myself everything for that project.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;img-fluid mx-auto d-block&#34; src=&#34;https://cassidy.codes/images/posts/video-glitch-art/toronto-sound-prints.jpg&#34; alt=&#34;Toronto Sound Prints&#34;&gt;&lt;/p&gt;

&lt;p&gt;Shortly after that project I started collaborating with an urban planner and we were curated into an exhibit that explored themes of noise. For this project we partnered with a research lab from Ryerson to take data they have about the emotional effects of noise on human subjects and we created glitched photographs and a heat map to represent Toronto’s sonic stress environments. For this project I worked in Processing again as my input and output were data and graphic related.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;img-fluid mx-auto d-block&#34; src=&#34;https://cassidy.codes/images/posts/video-glitch-art/teto.jpg&#34; alt=&#34;TeTo&#34;&gt;&lt;/p&gt;

&lt;p&gt;Since then I have collaborated on media art projects that have to do with sensory experiences and translating sensory information from one domain to another. This is a picture of a suitcase that makes noise based on the texture of the ground.&lt;/p&gt;

&lt;p&gt;Alongside these projects I was learning more about graphic design and taking on web development contracts starting with simple WordPress themes and eventually more complicated applications for corporate clients.&lt;/p&gt;

&lt;p&gt;So that’s a quick background on my portfolio. The important part about this, though, is some of the connections I made. When I was curated into the Noise Project, I met artists and designers who work both in the art world and in the creative industry.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;img-fluid mx-auto d-block&#34; src=&#34;https://cassidy.codes/images/posts/video-glitch-art/pizza.gif&#34; alt=&#34;Pizza&#34;&gt;&lt;/p&gt;

&lt;p&gt;Last Spring I was between contracts and a friend that I know from the art world called me up one night with a question about glitch art and mentioned that this was for a commercial contract. She sent me this sample and a link to some work by &lt;a href=&#34;http://ucnv.org/&#34;&gt;ucnv&lt;/a&gt; an artist who had written a &lt;a href=&#34;https://github.com/ucnv/aviglitch&#34;&gt;Ruby Gem&lt;/a&gt; that opens up AVI files lets you mess with them.&lt;/p&gt;

&lt;p&gt;I thought, “Glitch art? I’m not a glitch artist? Am I? Am I even a &lt;em&gt;real&lt;/em&gt; developer?” Frankly, even though I had done some glitch-data viz with jpegs, I was skeptical of the phrase “glitch art”. I was also uncertain about stepping outside the domain of web development for a commercial contract. I had no idea what it was going to be like to work with a bunch of video compositors.&lt;/p&gt;

&lt;p&gt;But I read the docs on the AviGlitch Gem to see what I could do and sent them a sample the next day. They called me and asked me if I was able to glitch 2,000 videos by the end of next week. I said yes. They asked how much it would cost and I aimed for a number I though would be high. They said start tomorrow.&lt;/p&gt;

&lt;p&gt;It took me about a week of creating different types of glitches and to get the effects they wanted. Once I had those I build off of a some work from the Gem’s author to write a command line tool that could have glitched 2,000 videos in an hour if they had a powerful enough computer. No one there knew how to program, so I made it really simple. Put the videos in the input directory and type &lt;code&gt;glitch all&lt;/code&gt; in the terminal and you get 11 variations of that movie to choose from.&lt;/p&gt;

&lt;p&gt;So here’s a quick overview of what you can do with this Gem. AVI files have two types of frames—or, at least, two that we care about— i-frames and p-frames. i-frames are like jpegs. They’re static. p-frames represent paths. They tell your video player which direction things are moving in.&lt;/p&gt;

&lt;p&gt;So the magic behind the AVI Glitch gem is that it puts these frames into an array and lets you ask the frame what kind it is. For most glitches, p-frames are the ones we want because they’re the ones with the motion. i-frames just make things look normal and normal is boring.&lt;/p&gt;

&lt;p&gt;Once you have this array of frames you can shuffle them around, repeat them, stack the same frames onto of each other, delete the i-frames or anything else that you can think of doing with an array. You can also access and manipulate some of the frame’s data if you want.&lt;/p&gt;

&lt;p&gt;The one trick to these glitches is that the Gem works with AVIs, so the scripts I wrote use ffmpeg to convert files from their current format to and AVI then saves them back in their original format. In this conversion process there are some cool glitches you can make by breaking codec files, but I didn’t get a chance to dig to deep into that for this work.&lt;/p&gt;

&lt;p&gt;So here’s an example. There are two parts to this clip. In the first I took out all the i-frames and then looped the clip over top of itself a couple times. This creates that effect where pieces of people’s faces get left behind or the absorbs the colours from another part of the picture because there are no i-frames to reset the position of things.&lt;/p&gt;

&lt;p&gt;Just to show you how boring they are, there’s an iframe in the middle of the clip. But then right after that I’ve created a 5 frame loop that gets messy.&lt;/p&gt;

&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34; style=&#34;margin-bottom: 1.5rem;&#34;&gt;
  &lt;iframe src=&#34;https://player.vimeo.com/video/141620297?byline=0&amp;portrait=0&#34; width=&#34;600&#34; height=&#34;400&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;In code, I can show you what that looks like. This script concatenates video clips with no i-frames between them. The only line we really care about is the on line where we mutate i-frames into p-frames (or key into delta, whichever words you choose). You’ll see that at the top and bottom there are two &lt;code&gt;ffmpeg&lt;/code&gt; commands that convert the file.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;begin&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;options&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;Docopt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;docopt&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;doc&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;mktmpdir&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;options&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;--debug&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;tmpdir&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;cmd&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;Cocaine&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;CommandLine&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;ffmpeg&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;-i :infile -c:v libxvid -y -q:v 0 :outfile&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;avi&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;nil&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;options&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;&amp;lt;infile&amp;gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;each&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;with_index&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;infile&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
      &lt;span style=&#34;color:#111&#34;&gt;avifile&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;tmpdir&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;join&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;mpeg4.avi&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
      &lt;span style=&#34;color:#111&#34;&gt;cmd&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;infile&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;infile&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;outfile&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;avifile&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;to_s&lt;/span&gt;
      &lt;span style=&#34;color:#111&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;AviGlitch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;avifile&lt;/span&gt;
      &lt;span style=&#34;color:#00a8c8&#34;&gt;unless&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#111&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;glitch&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;:keyframe&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
          &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;
      &lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;
      &lt;span style=&#34;color:#111&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;mutate_keyframes_into_deltaframes!&lt;/span&gt;
      &lt;span style=&#34;color:#00a8c8&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;avi&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;nil?&lt;/span&gt;
        &lt;span style=&#34;color:#111&#34;&gt;avi&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;a&lt;/span&gt;
      &lt;span style=&#34;color:#00a8c8&#34;&gt;else&lt;/span&gt;
        &lt;span style=&#34;color:#111&#34;&gt;avi&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;frames&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;frames&lt;/span&gt;
        &lt;span style=&#34;color:#111&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;close&lt;/span&gt;
      &lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;glitchfile&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;tmpdir&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;join&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;glitch.avi&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;avi&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;glitchfile&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;cmd&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;Cocaine&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;CommandLine&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;ffmpeg&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;-i :infile -q:v 0 :outfile&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;cmd&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;infile&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;glitchfile&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;to_s&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;outfile&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;options&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;-o&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;rescue&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;Docopt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;Exit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;e&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;message&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here’s what a couple of loops of this looks like. This is the same clip concatenated three times. If you’re out on the internet looking things up, this is also called datamoshing.&lt;/p&gt;

&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34; style=&#34;margin-bottom: 1.5rem;&#34;&gt;
  &lt;iframe src=&#34;https://player.vimeo.com/video/141495756?byline=0&amp;portrait=0&#34; width=&#34;600&#34; height=&#34;400&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;This melt effect is the one that you see a lot in glitched files. The real work here happens between &lt;code&gt;make_tmp_file&lt;/code&gt; and just before the &lt;code&gt;if&lt;/code&gt;. It opens the video up, grabs a start point and makes sure that it’s a p-frame then repeats that frame until the end of the file.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;begin&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;options&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;Docopt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;docopt&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;doc&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;mktmpdir&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;options&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;--debug&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;tmpdir&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;infile&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;options&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;&amp;lt;infile&amp;gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;avifile&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;tmpdir&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;join&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;mpeg4.avi&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;make_tmp_file&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;infile&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;avifile&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;avi&lt;/span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;AviGlitch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;avifile&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;num_frames&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;avi&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;frames&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;count&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;start&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;options&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;-s&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;to_i&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;start_at&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;start&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;num_frames&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;start&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;num_frames&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;start_at&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;avi&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;frames&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;start_at&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;is_keyframe?&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;melted&lt;/span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;avi&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;frames&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;start_at&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;num_frames&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;options&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;--decap&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
      &lt;span style=&#34;color:#111&#34;&gt;base&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;avi&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;frames&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;start_at&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;mutate_keyframes_into_deltaframes!&lt;/span&gt;
      &lt;span style=&#34;color:#111&#34;&gt;melted&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;base&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;melted&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;glitchfile&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;tmpdir&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;join&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;glitch.avi&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;melted&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;to_avi&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;glitchfile&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;options&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;--raw&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
      &lt;span style=&#34;color:#111&#34;&gt;cmd&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;Cocaine&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;CommandLine&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;cp&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;:infile :outfile&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;else&lt;/span&gt;
      &lt;span style=&#34;color:#111&#34;&gt;cmd&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;Cocaine&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;CommandLine&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;ffmpeg&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;-i :infile   -q:v 0 :outfile&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;cmd&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;infile&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;glitchfile&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;to_s&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;outfile&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;options&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;-o&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;rescue&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;Docopt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;Exit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;e&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;message&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here’s the result. You’ll notice that the audio cuts out in this one. This is because not every frame is synchronized with the audio file, so when we glitch here we loose the audio.&lt;/p&gt;

&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34; style=&#34;margin-bottom: 1.5rem;&#34;&gt;
  &lt;iframe src=&#34;https://player.vimeo.com/video/141495759?byline=0&amp;portrait=0&#34; width=&#34;600&#34; height=&#34;400&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;If you wanted to mess with the frame data, you can get a result something like this. In this clip I randomly deleted pieces of data. It gives this sort of heatwave effect because the i-frames suddenly have motion that they didn’t have before.&lt;/p&gt;

&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34; style=&#34;margin-bottom: 1.5rem;&#34;&gt;
  &lt;iframe src=&#34;https://player.vimeo.com/video/141495758?byline=0&amp;portrait=0&#34; width=&#34;600&#34; height=&#34;400&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Finally, if you want to get really wild, you can stack effects on top of each other like this one. This gets really cool when you take one totally glitched frame and concatenate it with a frame that has lots of motion. Check it out.&lt;/p&gt;

&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34; style=&#34;margin-bottom: 1.5rem;&#34;&gt;
  &lt;iframe src=&#34;https://player.vimeo.com/video/141495760?byline=0&amp;portrait=0&#34; width=&#34;600&#34; height=&#34;400&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Developing with Kirby</title>
      <link>https://cassidy.codes/blog/2015/05/25/kirby-cms/</link>
      <pubDate>Mon, 25 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cassidy.codes/blog/2015/05/25/kirby-cms/</guid>
      <description>

&lt;p&gt;A year or so ago, I taught myself PHP by way of WordPress. I didn&amp;rsquo;t consider myself a developer, but I knew how to make things happen. When I learned Ruby on Rails, I was thrilled to realize that I actually understood the basic concepts of programming, and I picked up Ruby really quickly.&lt;/p&gt;

&lt;p&gt;After learning Rails this winter, I was curious to see how much more I understood about PHP now that I had begun to work with Ruby, so I built a new site using &lt;a href=&#34;http://getkirby.com&#34;&gt;Kirby&lt;/a&gt;. I&amp;rsquo;ve loved working with Kirby. It&amp;rsquo;s really easy to extend the app and it&amp;rsquo;s API feels very natural.&lt;/p&gt;

&lt;h2 id=&#34;no-database&#34;&gt;No Database&lt;/h2&gt;

&lt;p&gt;By default, Kirby does not have a database. It&amp;rsquo;s a file-based system, meaning that each page has a directory with a text files and images. This is not unlike &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;, except that Kirby serves PHP, rather than static pages.&lt;/p&gt;

&lt;p&gt;This structure works nicely for simple sites but fortunately you can hook Kirby up to MySQL and Sqlite if you need.&lt;/p&gt;

&lt;h2 id=&#34;vc&#34;&gt;*VC&lt;/h2&gt;

&lt;p&gt;Learning Rails, I found the concept of MVC really helpful for understanding the roles of each part of the application. Kirby is not an MVC app, but it has some aspects of this.&lt;/p&gt;

&lt;h3 id=&#34;models&#34;&gt;Models&lt;/h3&gt;

&lt;p&gt;The closest thing you might find to a mole is the &lt;code&gt;blueprint&lt;/code&gt;. Each template has a related &lt;code&gt;blueprint&lt;/code&gt; that lays out the fields for this template. It also determines the layout of the page editor in the back end, called the Panel.&lt;/p&gt;

&lt;p&gt;However, Kirby can be run without the Panel and you could add any field to a page you like. You can also add any file to the page directory and it becomes part of that &lt;code&gt;$page&lt;/code&gt; object, even if it is a a directory with another &lt;code&gt;$page&lt;/code&gt; in it. So the &amp;ldquo;model&amp;rdquo; in Kirby is somewhere between the &lt;code&gt;blueprint&lt;/code&gt; and the directory itself.&lt;/p&gt;

&lt;h3 id=&#34;views&#34;&gt;Views&lt;/h3&gt;

&lt;p&gt;Templates are Kirby&amp;rsquo;s views. Kirby will check the name of the text file in a directory and go look for a template with the same name. If one doesn&amp;rsquo;t exist, it&amp;rsquo;ll use the &lt;code&gt;default.php&lt;/code&gt; template. In the site that I made last week, I left much more logic in the templates than I am comfortable with. I&amp;rsquo;ll have to refactor this to use the controllers instead.&lt;/p&gt;

&lt;h3 id=&#34;controllers&#34;&gt;Controllers&lt;/h3&gt;

&lt;p&gt;Kirby does have controllers. Although, I don&amp;rsquo;t remember seeing this in earlier versions of the app. The &lt;a href=&#34;https://github.com/ausminternet/blogprint&#34;&gt;BlogPrint&lt;/a&gt; plugin uses controllers to distinguish between &lt;code&gt;$pages&lt;/code&gt; and &lt;code&gt;$posts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Controllers are &lt;a href=&#34;http://getkirby.com/docs/templates/controllers&#34;&gt;documented in Kirby&lt;/a&gt;, but many of the code examples in the docs or on the forum use quite a bit of logic in the templates.&lt;/p&gt;

&lt;h3 id=&#34;helpers&#34;&gt;Helpers&lt;/h3&gt;

&lt;p&gt;When Kirby loads it looks through the &lt;code&gt;/site/plugins&lt;/code&gt; directory and loads any PHP files here. This is where you can place helper functions. Frankly, I&amp;rsquo;d rather if there were two separate directories, &amp;ldquo;Helpers&amp;rdquo; and &amp;ldquo;Plugins&amp;rdquo;, or &amp;ldquo;Vendor&amp;rdquo;. To me, a helper is a function you write yourself for the web app you&amp;rsquo;re building whereas a &amp;ldquo;Plugin&amp;rdquo; is third-party code that you&amp;rsquo;re plugging into your app.&lt;/p&gt;

&lt;p&gt;In the site I made last week, I used the BlogPrint plugin, which uses a handful of helper functions to get post authors and meta data. I also wrote a method that collects images and puts them into a gallery using &lt;a href=&#34;http://foundation.zurb.com/docs/components/clearing.html&#34;&gt;Foundation&amp;rsquo;s Clearing Lightbox&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toolkit-api&#34;&gt;Toolkit API&lt;/h2&gt;

&lt;p&gt;Kirby comes with a collection of functions that extend some basic PHP classes and give you a handful of useful helpers for working with PHP. The &lt;a href=&#34;http://getkirby.com/docs/toolkit/api&#34;&gt;docs on this are very limited&lt;/a&gt;, but the source code is written very clearly.&lt;/p&gt;

&lt;p&gt;When I was writing a function to build an image gallery, I used the a couple of these helpers and when things didn&amp;rsquo;t work as I expected, I just followed the string of functions to figure out what was going on. If I work on a non-Kirby related project in the future, I might want to use the Toolkit.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m excited about working with Kirby in the future. It looks like a really excellent choice for my freelance work. I sent the site I built to a friend who will be using it and she replied saying, &amp;ldquo;I&amp;rsquo;m LOVING working on this site. So logical and easy.&amp;rdquo; I can&amp;rsquo;t take credit for that. I laid out some of the back end pages, but Kirby&amp;rsquo;s Panel just makes sense.&lt;/p&gt;

&lt;p&gt;I launched the new site this week because the charity I made it for is being featured in a news article, but I haven&amp;rsquo;t finished working on it. At the moment it&amp;rsquo;s using the base Foundation styles because I was focused on getting something functional out there for their publication deadline. I&amp;rsquo;ll post a link to the site once it&amp;rsquo;s done.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scraping The City of Toronto&#39;s Council Data</title>
      <link>https://cassidy.codes/blog/2015/03/10/scraping-city-toronto-data/</link>
      <pubDate>Tue, 10 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cassidy.codes/blog/2015/03/10/scraping-city-toronto-data/</guid>
      <description>

&lt;p&gt;I am working with two of my classmates to create an API for the City of Toronto&amp;rsquo;s City Council data. We&amp;rsquo;ve spent a lot of time discussing the idea, and this week we got down to work.&lt;/p&gt;

&lt;h2 id=&#34;why-are-we-doing-this&#34;&gt;Why Are We Doing This?&lt;/h2&gt;

&lt;p&gt;A couple weeks back, I was chatting with &lt;a href=&#34;https://twitter.com/graphicmatt&#34;&gt;Matt Elliot&lt;/a&gt; about the stories we might find in this data. He had a great example. Checkout the &lt;a href=&#34;http://app.toronto.ca/tmmis/viewAgendaItemHistory.do?item=2015.EX2.2&#34;&gt;SmartTrack Work Plan&lt;/a&gt; from February&amp;rsquo;s meeting. You&amp;rsquo;ll notice that the item was adopted 42 - 2. Looks like council loves SmartTrack, right? We&amp;rsquo;ll inside this document you&amp;rsquo;ll see that Gord Perks moved to amend the item. He wanted to delete a number of sections from the SmartTrack study. This motion to amend failed 9 - 35. The vote on this amendment reveals a much more interesting story about council&amp;rsquo;s leaning than the overall result does.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re building out this API so that we can start using the data to tell interesting stories about how we engage urban politics on a daily basis.&lt;/p&gt;

&lt;h2 id=&#34;the-data&#34;&gt;The Data&lt;/h2&gt;

&lt;p&gt;The City of Toronto has an Open Data portal where you can get anything from the Council vote records to shape files for mapping. We are focusing on data related to City Council, so we&amp;rsquo;re interested in Agendas, Minutes, Decision Documents, and votes. The first three items on this list are accessible through the City&amp;rsquo;s website. Navigating the interface to figure out exactly what you&amp;rsquo;re looking at is cumbersome. Figuring out the API is nearly impossible.&lt;/p&gt;

&lt;h3 id=&#34;agendas&#34;&gt;Agendas&lt;/h3&gt;

&lt;p&gt;Agendas are posted about one week in advance of a meeting. They outline each item that will be discussed during Council. If a City Council member has given notice that they will be putting forward a motion, you&amp;rsquo;ll see it at the end of this document.&lt;/p&gt;

&lt;h3 id=&#34;minutes&#34;&gt;Minutes&lt;/h3&gt;

&lt;p&gt;Minutes outline City Council&amp;rsquo;s everything that happened to an item during the Council meeting. This includes the text of motions to amend, both carried and lost, and the vote record on each item.&lt;/p&gt;

&lt;h3 id=&#34;decision-documents&#34;&gt;Decision Documents&lt;/h3&gt;

&lt;p&gt;The Decision Documents are the items as adopted by City Council. These items do not include the motion history as it was debated.&lt;/p&gt;

&lt;h3 id=&#34;vote-record&#34;&gt;Vote Record&lt;/h3&gt;

&lt;p&gt;The vote record can be downloaded as a CSV. This includes every recorded vote but unfortunately, not every vote is logged here. The only good thing Rob Ford did for council was to require that while he was in office, every vote gets recorded.&lt;/p&gt;

&lt;h2 id=&#34;getting-the-data&#34;&gt;Getting the Data&lt;/h2&gt;

&lt;h3 id=&#34;council-documents&#34;&gt;Council Documents&lt;/h3&gt;

&lt;p&gt;The first three items come in a beautifully formatted, HTML document with no hierarchy and no semantic class names. It&amp;rsquo;s a dream. If you&amp;rsquo;ve never parsed HTML before, you probably missed my sarcasm here. Check out the &lt;a href=&#34;http://app.toronto.ca/tmmis/viewPublishedReport.do?function=getCouncilAgendaReport&amp;amp;meetingId=9688&#34;&gt;agenda for the recent Council meeting last February&lt;/a&gt; to see what I mean. Although these documents have a visual hierarchy, it is extremely difficult to parse the HTML in code. So far we&amp;rsquo;ve written a scraper that breaks the document into individual items, and separates out the important identifiers (number, type, title, etc.).&lt;/p&gt;

&lt;p&gt;For these three documents, TMMIS, the city&amp;rsquo;s system that hosts this data, uses queries in the URL. That agenda report above looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://app.toronto.ca/tmmis/viewPublishedReport.do?function=getCouncilAgendaReport&amp;amp;meetingId=9688
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two important parts here. &lt;code&gt;getCouncilAgendaReport&lt;/code&gt; tells us which kind of report we&amp;rsquo;re generating, and which decision body this report is coming from. &lt;code&gt;meetingId&lt;/code&gt; tells us which meeting we&amp;rsquo;re looking at. We had to write a separate section of the scraper to look at all the meeting in a year to get the meeting IDs.&lt;/p&gt;

&lt;h3 id=&#34;vote-record-1&#34;&gt;Vote Record&lt;/h3&gt;

&lt;p&gt;The Vote Record is completely different. Check out &lt;a href=&#34;http://app.toronto.ca/tmmis/getAdminReport.do?function=prepareMemberVoteReport&#34;&gt;this page&lt;/a&gt; where you can download a CSV of your Councillor&amp;rsquo;s voting record. Here, instead of worrying about HTML, we get to ask the server for a CSV. Parsing this is awesome. When you click the link that says &amp;ldquo;Download as CSV&amp;rdquo; on a Councillor&amp;rsquo;s vote record, your browser sends a POST request to the server with some parameters that match the form you&amp;rsquo;ve filled out. The server responds with a CSV file. So for this part of the scraper, we are sending out a POST for every City Councillor and saving their CSV.&lt;/p&gt;

&lt;h3 id=&#34;the-database&#34;&gt;The Database&lt;/h3&gt;

&lt;p&gt;This will require another post here, but last weekend we spent an afternoon picking through these documents and talking about how Council works to figure out how to represent this in a database. We think that our models represent the real world happenings of city council.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Arrays vs Hashes in Ruby</title>
      <link>https://cassidy.codes/blog/2015/01/26/arrays-vs-hashes-ruby/</link>
      <pubDate>Mon, 26 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cassidy.codes/blog/2015/01/26/arrays-vs-hashes-ruby/</guid>
      <description>

&lt;p&gt;This weekend I created a small, Ruby CRM application that stores contact information. You can check out my code on &lt;a href=&#34;https://github.com/CivicImages/CRM_App&#34;&gt;GitHub&lt;/a&gt;. While I was building this app, most people were using an array to store their contact information, but I wanted to use a Hash. I kew that theoretically Hashes are fster than Arrays, but I didn&amp;rsquo;t know why.&lt;/p&gt;

&lt;h2 id=&#34;arrays-vs-hashes&#34;&gt;Arrays vs Hashes&lt;/h2&gt;

&lt;p&gt;The quick answer is that Hashes in Ruby are more easily accessible than an item in an array. Check out the video below that explains how this works. If you don&amp;rsquo;t want to watch the whole thing, my notes are below.&lt;/p&gt;

&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34; style=&#34;margin-bottom: 1.5rem;&#34;&gt;
  &lt;iframe width=&#34;740&#34; height=&#34;416&#34; src=&#34;//www.youtube.com/embed/YHULcgaATh4&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Ruby sorts key-value pairs into one of 11 bins. It does this using a a method called &lt;code&gt;hash&lt;/code&gt;. &lt;code&gt;hash&lt;/code&gt; returns a really big number on any object. Try calling &lt;code&gt;12345.hash&lt;/code&gt; or &lt;code&gt;&amp;quot;abcde&amp;quot;.hash&lt;/code&gt;. Every time you call it on the same value, you&amp;rsquo;ll get the same really huge number.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12345&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;hash&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4392066022887924543&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Ruby then gets the modulus of of this number when divided by 11. So any number &lt;code&gt;% 11&lt;/code&gt; will give us a value between 0 and 10. The key-value pair will then be stored in that bin.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12345&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;hash&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# This would go into bin 3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
When you call a &lt;code&gt;key&lt;/code&gt; from a hash, Ruby calculates the modulus again and goes right to the bin where this value was stored. So in a hash, the &lt;code&gt;key&lt;/code&gt; serves as a shortcut right to the information stored in the &lt;code&gt;value&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;what-are-enumerables&#34;&gt;What are Enumerables&lt;/h2&gt;

&lt;p&gt;&amp;ldquo;Enumerable&amp;rdquo; is a word that confused me at when I first saw it. The Ruby Docs say, &amp;ldquo;The &lt;code&gt;Enumerable&lt;/code&gt; mixin provides collection classes with several traversal and searching methods, and with the ability to sort.&amp;rdquo; Uuh, okay.&lt;/p&gt;

&lt;p&gt;When I call &lt;code&gt;Enumerable.class&lt;/code&gt; in Pry it tells me that Enumerables are a &lt;code&gt;Module&lt;/code&gt;. I know that a module is a functionality that is shared between otherwise unrelated &lt;code&gt;Classes&lt;/code&gt;. So this means that an &lt;code&gt;Enumerable&lt;/code&gt; lets you search or move through classes that are collections of things, like &lt;code&gt;Arrays&lt;/code&gt; and &lt;code&gt;Hahses&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In my CRM I used &lt;code&gt;.find_all&lt;/code&gt; in my original &lt;code&gt;search_contacts&lt;/code&gt; method. When I did this I noticed that the method was returning the result plus the whole hash itself. Here, I have to assign the result to a variable the end the method by returning that variable. If I simply had &lt;code&gt;@contacts.find_all { ... }&lt;/code&gt; as my last line, my search function would return all the contacts and then return the entire Hash that I searched.&lt;/p&gt;

&lt;h2 id=&#34;searching-the-hash&#34;&gt;Searching the Hash&lt;/h2&gt;

&lt;p&gt;For the time being, I am searching for individual contacts by calling the contact ID, or the &lt;code&gt;key&lt;/code&gt; in the Hash. But I want to be able to search for contacts by the content of any value. So you could input &amp;ldquo;jekyll&amp;rdquo; and the app will retrun all contacts with &amp;ldquo;jekyll&amp;rdquo; in any variable. Any idea how to do that?&lt;/p&gt;

&lt;p&gt;I have tried iterating through the hash and using &lt;code&gt;.find_all&lt;/code&gt;. I&amp;rsquo;ve also built my own search method, but right now, neither of those are working for me. I think &lt;code&gt;find_all&lt;/code&gt; doesn&amp;rsquo;t work because the values stored in the Hash are instances of the class, and not just a &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another question I have is, if you are searching a Hash for all entries that match a value, is a Hash stil faster than an array? In other words, is it faster to load Hash bins individually than it is to load the whole array?&lt;/p&gt;

&lt;p&gt;Have an answer for this? I&amp;rsquo;d love to hear it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Optimizing GIFS with FFMPEG</title>
      <link>https://cassidy.codes/blog/2017/04/25/ffmpeg-frames-to-gif-optimization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cassidy.codes/blog/2017/04/25/ffmpeg-frames-to-gif-optimization/</guid>
      <description>

&lt;p&gt;A few months back I was working on an iOS app that delivered GIFs to users. The idea was that someone would visit one of our 3D photo booths, and get an animated avatar created. We could then render animation frames to PNGs using our custom software. The problem was that some of our animations were rather long, so we needed to crunch the gifs down to the smallest possible size.&lt;/p&gt;

&lt;p&gt;Before I dive in, I want to give big credit to the author of &lt;a href=&#34;http://blog.pkh.me/p/21-high-quality-gif-with-ffmpeg.html&#34;&gt;this post about high quality GIFs with FFMPEG&lt;/a&gt;. I worked through their notes and dug deeper into FFMPEG docs to get the results here. If you&amp;rsquo;re looking to convert movies to GIFs, check out that article.&lt;/p&gt;

&lt;h2 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;Here is my modified version of the script from the &lt;a href=&#34;http://blog.pkh.me/p/21-high-quality-gif-with-ffmpeg.html&#34;&gt;Usage&lt;/a&gt; section of the above blog post. What follows in a brief explanation for those who have the patience for digging into FFMPEG.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;palette&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;/tmp/palette.png&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#111&#34;&gt;filters&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;fps=15,scale=320:-1:flags=lanczos&amp;#34;&lt;/span&gt;

ffmpeg -v warning -i &lt;span style=&#34;color:#111&#34;&gt;$1&lt;/span&gt; -vf &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;$filters&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;,palettegen=stats_mode=diff&amp;#34;&lt;/span&gt; -y &lt;span style=&#34;color:#111&#34;&gt;$palette&lt;/span&gt;

ffmpeg -i &lt;span style=&#34;color:#111&#34;&gt;$1&lt;/span&gt; -i &lt;span style=&#34;color:#111&#34;&gt;$palette&lt;/span&gt; -lavfi &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;$filters&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;,paletteuse=dither=bayer:bayer_scale=5:diff_mode=rectangle&amp;#34;&lt;/span&gt; -y &lt;span style=&#34;color:#111&#34;&gt;$2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;filtergraphs&#34;&gt;Filtergraphs&lt;/h2&gt;

&lt;p&gt;The filter options can get a little confusing. So here&amp;rsquo;s a quick explanation of the Filtergraph Syntax.&lt;/p&gt;

&lt;p&gt;The basic values we&amp;rsquo;re passing in with our &lt;code&gt;$filters&lt;/code&gt; variable are structured like a nested key-value pairs. If a visual representation helps, we could represent this variable like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;fps&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;
scale&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;320&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;]&lt;/span&gt;
  flags&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;lanczos&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we add &lt;code&gt;,palettegen&lt;/code&gt; on the end, we&amp;rsquo;re just adding one more top level key to the filtergraph.&lt;/p&gt;

&lt;p&gt;Things get a little more complex when we generate the GIF. Let&amp;rsquo;s look at everything we pass in to the &lt;code&gt;-lavfi&lt;/code&gt; option:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;fps&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;
scale&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;320&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;]&lt;/span&gt;
  flags&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;lanczos&amp;#34;&lt;/span&gt;
paletteuse&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt;
  dither&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt;
    bayer_scale&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
    diff_mode&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; rectangle&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can find a more detailed explanation of this in FFMPEG&amp;rsquo;s &lt;a href=&#34;http://www.ffmpeg.org/ffmpeg-filters.html#Filtering-Introduction.&#34;&gt;Filtergraph Docs&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;explanation-of-options&#34;&gt;Explanation of Options&lt;/h2&gt;

&lt;p&gt;I won&amp;rsquo;t go into each option we&amp;rsquo;re passing to FFMPEG here, but there are a couple things that differ from the original blog post.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Using &lt;code&gt;stats_mode=diff&lt;/code&gt; when generating the palette. This will generate a smaller palette because FFMPEG will only look at the pixels that do not change from one frame to the next. I found that without this, some static pixels would still change colours ever so slightly between frames.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Dithering with a &lt;code&gt;bayer_scale=5&lt;/code&gt;. Have a look a the different options for dithering as they&amp;rsquo;ll each have a different effect depending on your content. In our case, since the images were synthetic (i.e., not photographic), dithering using the Bayer algorithm worked quite nicely.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;diff_mode=rectangle&lt;/code&gt; restricts area to only the regions where there is motion. This means that the areas without motion will remain the transparent from one frame to the next.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;the-result&#34;&gt;The Result&lt;/h2&gt;

&lt;p&gt;For our longer gifs, this method cut our file size down by about 40%. The image below works out to just 166K. We get a little bit of colour banding, but I think that&amp;rsquo;s acceptable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cassidy.codes/images/posts/gif-optimization/final.gif&#34; alt=&#34;An animated GIF of my avatar doing a backflip.&#34; class=&#34;img-fluid mx-auto d-block&#34;&gt;&lt;/p&gt;

&lt;p&gt;If you want to peak at the internals of a gif, you can use &lt;code&gt;gifsicle -e input.gif&lt;/code&gt; to explode the frames. Here&amp;rsquo;s the first three frames of the gif above. Notice that only the pixels that change from one frame to the next are present.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cassidy.codes/images/posts/gif-optimization/final.000.gif&#34; alt=&#34;An animated GIF of my avatar doing a backflip.&#34; class=&#34;img-fluid mx-auto d-block&#34;&gt;
&lt;img src=&#34;https://cassidy.codes/images/posts/gif-optimization/final.001.gif&#34; alt=&#34;An animated GIF of my avatar doing a backflip.&#34; class=&#34;img-fluid mx-auto d-block&#34;&gt;
&lt;img src=&#34;https://cassidy.codes/images/posts/gif-optimization/final.002.gif&#34; alt=&#34;An animated GIF of my avatar doing a backflip.&#34; class=&#34;img-fluid mx-auto d-block&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
